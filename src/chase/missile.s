;
; File generated by cc65 v 2.17 - Git d002f6e
;
	.fopt		compiler,"cc65 v 2.17 - Git d002f6e"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_DRAW_BROKEN_WALL
	.import		_points
	.import		_displayCharacter
	.import		_deleteCharacter
	.import		_isCharacterAtLocation
	.import		_wallReached
	.import		_die
	.import		_ghostDies
	.export		_handle_missile
	.export		_checkMissile
	.export		_checkMissileVsGhost
	.export		_checkMissileVsGhosts
	.export		_checkMissileVsInvincibleGhost
	.export		_setMissileInitialPosition
	.export		__moveMissile
	.export		_moveMissile
	.import		_reducePowerUpsCoolDowns
	.export		_handle_chasing_bullet
	.import		_oneMissileLevel
	.import		_rocketLevel
	.import		_missileLevel
	.import		_bossLevel
	.import		_displayStats
	.import		_printGunsStats
	.import		_decreaseGhostLevel
	.import		_moveTowardCharacter
	.import		_ghosts
	.import		_DEAD_GHOST_IMAGE
	.import		_invincibleGhost
	.import		_invincibleGhostHits
	.import		_invincibleGhostAlive
	.import		_playerFire
	.import		_guns
	.import		_playerDirection
	.import		_missileDirection
	.import		_missile
	.import		_player
	.import		_chasingBullet
	.import		_leftEnemyMissile
	.import		_rightEnemyMissile
	.import		_bubbles_x
	.import		_bubbles
	.import		_dead_bubbles
	.import		_chasedEnemyPtr
	.export		_destroyEnemyMissile

; ---------------------------------------------------------------
; void __near__ handle_missile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handle_missile: near

.segment	"CODE"

	lda     _playerFire
	beq     L0101
	lda     _missile+2
	bne     L0101
	lda     _guns
	beq     L0101
	dec     _guns
	jsr     _printGunsStats
	lda     _playerDirection
	sta     _missileDirection
	lda     #<(_missile)
	ldx     #>(_missile)
	jsr     pushax
	lda     #<(_player)
	ldx     #>(_player)
	jsr     pushax
	lda     _missileDirection
	ldx     #$00
	jsr     _setMissileInitialPosition
	sta     _missile+2
	lda     #$00
	sta     _playerFire
	lda     #<(_missile)
	ldx     #>(_missile)
	jsr     _displayCharacter
	lda     #<(_missile)
	ldx     #>(_missile)
	jsr     _checkMissile
L0101:	lda     _missile+2
	cmp     #$01
	bne     L0028
	lda     #<(_missile)
	ldx     #>(_missile)
	jsr     pushax
	lda     _missileDirection
	ldx     #$00
	jsr     _moveMissile
	lda     #<(_missile)
	ldx     #>(_missile)
	jmp     _checkMissile
L0028:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ checkMissile (__near__ struct CharacterStruct *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkMissile: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _checkMissileVsInvincibleGhost
	jsr     ldax0sp
	jsr     _checkMissileVsGhosts
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ checkMissileVsGhost (__near__ struct CharacterStruct *, __near__ struct CharacterStruct *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkMissileVsGhost: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	beq     L0035
	iny
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     pusha
	ldy     #$04
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	ldy     #$03
	jsr     ldaxysp
	jsr     _isCharacterAtLocation
	tax
	jeq     incsp4
	lda     #$0A
	clc
	adc     _points
	sta     _points
	bcc     L0040
	inc     _points+1
L0040:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #<(_DEAD_GHOST_IMAGE)
	ldy     #$03
	sta     (ptr1),y
	iny
	lda     #>(_DEAD_GHOST_IMAGE)
	sta     (ptr1),y
	jsr     ldax0sp
	jsr     _ghostDies
	ldy     #$03
	jsr     ldaxysp
	jsr     _die
L0035:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ checkMissileVsGhosts (__near__ struct CharacterStruct *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkMissileVsGhosts: near

.segment	"CODE"

	jsr     pushax
	lda     #$00
	jsr     pusha
	tay
L0105:	lda     (sp),y
	cmp     #$09
	bcs     L004A
	ldx     #$00
	lda     (sp),y
	jsr     mulax5
	clc
	adc     #<(_ghosts)
	sta     ptr1
	txa
	adc     #>(_ghosts)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	beq     L004B
	ldy     #$04
	jsr     pushwysp
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     mulax5
	clc
	adc     #<(_ghosts)
	tay
	txa
	adc     #>(_ghosts)
	tax
	tya
	jsr     _checkMissileVsGhost
L004B:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jmp     L0105
L004A:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ checkMissileVsInvincibleGhost (__near__ struct CharacterStruct *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkMissileVsInvincibleGhost: near

.segment	"CODE"

	jsr     pushax
	lda     _invincibleGhost+2
	bne     L0106
	jmp     incsp2
L0106:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     pusha
	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #<(_invincibleGhost)
	ldx     #>(_invincibleGhost)
	jsr     _isCharacterAtLocation
	tax
	jeq     incsp2
	jsr     ldax0sp
	jsr     _die
	jsr     ldax0sp
	jsr     _deleteCharacter
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$01
	sta     (ptr1),y
	inc     _invincibleGhostHits
	jsr     _decreaseGhostLevel
	jsr     _reducePowerUpsCoolDowns
	lda     _invincibleGhostHits
	cmp     #$04
	bcc     L006B
	lda     #$00
	sta     _invincibleGhost+2
	lda     #<(_invincibleGhost)
	ldx     #>(_invincibleGhost)
	jsr     _deleteCharacter
	lda     #$4E
	sta     _invincibleGhost
	lda     #$15
	sta     _invincibleGhost+1
	lda     #$00
	sta     _invincibleGhostAlive
	lda     #$C8
	clc
	adc     _points
	sta     _points
	bcc     L007A
	inc     _points+1
L007A:	jsr     _displayStats
	jmp     incsp2
L006B:	lda     #<(_invincibleGhost)
	ldx     #>(_invincibleGhost)
	jsr     _displayCharacter
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ setMissileInitialPosition (__near__ struct CharacterStruct *, __near__ struct CharacterStruct *, unsigned short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setMissileInitialPosition: near

.segment	"CODE"

	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     staspidx
	ldy     #$07
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     __moveMissile
	ldy     #$05
	jsr     ldaxysp
	jsr     _wallReached
	tax
	beq     L0107
	ldy     #$05
	jsr     ldaxysp
	jsr     _die
	ldy     #$05
	jsr     ldaxysp
	jsr     _deleteCharacter
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     pusha
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     _DRAW_BROKEN_WALL
	ldx     #$00
	txa
	jmp     incsp6
L0107:	lda     #$01
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ _moveMissile (__near__ struct CharacterStruct *, unsigned short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	__moveMissile: near

.segment	"CODE"

	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _deleteCharacter
	jsr     ldax0sp
	cpx     #$00
	bne     L0084
	cmp     #$00
	beq     L0086
	cmp     #$01
	beq     L0089
	cmp     #$02
	beq     L008F
	cmp     #$03
	beq     L008C
	jmp     incsp4
L0086:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	jmp     L0108
L0089:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	tya
	clc
	adc     (ptr1),y
	jmp     L0108
L008C:	tay
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	jmp     L010B
L008F:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
L010B:	lda     (ptr1),y
	sec
	sbc     #$01
L0108:	sta     (ptr1),y
L0084:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ moveMissile (__near__ struct CharacterStruct *, unsigned short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveMissile: near

.segment	"CODE"

	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     __moveMissile
	ldy     #$03
	jsr     ldaxysp
	jsr     _wallReached
	tax
	jeq     L00B4
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jeq     L00B4
	iny
	jsr     ldaxysp
	jsr     _die
	ldy     #$03
	jsr     ldaxysp
	jsr     _deleteCharacter
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     pusha
	ldy     #$04
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     _DRAW_BROKEN_WALL
	jsr     _oneMissileLevel
	tax
	beq     L00C0
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$4F
	jne     L00D4
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	cmp     #$0B
	bne     L00D4
	lda     _rightEnemyMissile+2
	beq     L00D4
	lda     #<(_rightEnemyMissile)
	ldx     #>(_rightEnemyMissile)
	jmp     L010C
L00C0:	jsr     _missileLevel
	tax
	bne     L00CB
	jsr     _bossLevel
	tax
	beq     L00D4
L00CB:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$4F
	bne     L00CD
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	cmp     #$03
	bne     L00CD
	lda     _rightEnemyMissile+2
	beq     L00CD
	lda     #<(_rightEnemyMissile)
	ldx     #>(_rightEnemyMissile)
	jmp     L010C
L00CD:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L00D4
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	cmp     #$13
	bne     L00D4
	lda     _leftEnemyMissile+2
	beq     L00D4
	lda     #<(_leftEnemyMissile)
	ldx     #>(_leftEnemyMissile)
L010C:	jsr     _destroyEnemyMissile
L00D4:	jsr     _rocketLevel
	tax
	bne     L00DD
	jsr     _bossLevel
	tax
	bne     L00DD
	jmp     incsp4
L00DD:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	cmp     #$16
	beq     L011B
	jmp     incsp4
L011B:	jsr     decsp1
	lda     #$00
	tay
L010D:	sta     (sp),y
	cmp     #$04
	bcs     L00E3
	ldy     #$04
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	tay
	lda     _bubbles_x,y
	jsr     tosicmp0
	bne     L00E4
	ldx     #$00
	lda     (sp,x)
	jsr     mulax5
	clc
	adc     #<(_bubbles)
	sta     ptr1
	txa
	adc     #>(_bubbles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	beq     L00E4
	ldx     #$00
	lda     (sp,x)
	jsr     mulax5
	clc
	adc     #<(_bubbles)
	sta     ptr1
	txa
	adc     #>(_bubbles)
	sta     ptr1+1
	lda     #$00
	ldy     #$02
	sta     (ptr1),y
	inc     _dead_bubbles
	tax
	lda     (sp,x)
	jsr     mulax5
	clc
	adc     #<(_bubbles)
	tay
	txa
	adc     #>(_bubbles)
	tax
	tya
	jsr     _deleteCharacter
	lda     #$14
	clc
	adc     _points
	sta     _points
	bcc     L00FA
	inc     _points+1
L00FA:	jsr     _displayStats
L00E4:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L010D
L00E3:	jsr     incsp1
	jmp     incsp4
L00B4:	ldy     #$03
	jsr     ldaxysp
	jsr     _displayCharacter
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ handle_chasing_bullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handle_chasing_bullet: near

.segment	"CODE"

	lda     _chasingBullet+2
	beq     L0008
	lda     #<(_chasingBullet)
	ldx     #>(_chasingBullet)
	jsr     _deleteCharacter
	lda     _chasedEnemyPtr
	ldx     _chasedEnemyPtr+1
	jsr     pushax
	lda     #<(_chasingBullet)
	ldx     #>(_chasingBullet)
	jsr     pushax
	lda     #$04
	jsr     _moveTowardCharacter
	lda     #<(_chasingBullet)
	ldx     #>(_chasingBullet)
	jsr     _displayCharacter
	lda     #<(_chasingBullet)
	ldx     #>(_chasingBullet)
	jmp     _checkMissile
L0008:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ destroyEnemyMissile (__near__ struct CharacterStruct *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_destroyEnemyMissile: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$02
	sta     (ptr1),y
	jsr     ldax0sp
	jsr     _deleteCharacter
	lda     #$32
	clc
	adc     _points
	sta     _points
	bcc     L00AC
	inc     _points+1
L00AC:	jsr     _displayStats
	inc     _dead_bubbles
	jsr     _reducePowerUpsCoolDowns
	jmp     incsp2

.endproc

