# ------------------------------------------------------------------------------------------
# Z88DK
#


pc88:
	$(Z88DK_PATH)$(MYZ88DK) +pc88 $(SCCZ80_OPTS)  -Cz--audio $(INCLUDE_OPTS) -vn \
	-DSOUNDS -D__PC88__ -DFULL_GAME -DEND_SCREEN -DBETWEEN_LEVEL \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-create-app	\
	-o FULL_pc88
	rm FULL_pc88
	tar czvf FULL_pc88.tar.zip FULL_pc88.t88 FULL_pc88.wav
	rm FULL_pc88.t88
	rm FULL_pc88.wav
	mv FULL_pc88.tar.zip $(BUILD_PATH)


aquarius_exp_4k:
	$(Z88DK_PATH)$(MYZ88DK) +aquarius $(ZSDCC_OPTS) \
	-compiler=sdcc \
	$(INCLUDE_OPTS) \
	\
	-D__AQUARIUS__ -DTINY_GAME \
	-DNO_RANDOM_LEVEL \
	-DALT_PRINT \
	-DNO_DEAD_GHOSTS \
	-DFORCE_NARROW \
	-DDEFAULT_CLEAR_SCREEN \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	-lndos -o TINY_aquarius_exp_4k -create-app \
	-DMEMORY_MAPPED \
	$(TINY_FILES) \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/aquarius/aquarius_init_graphics.c
	rm TINY_aquarius_exp_4k
	tar czvf TINY_aquarius_exp_4k.tar.zip TINY_aquarius_exp_4k.caq _TINY_aquarius_exp_4k.caq
	rm TINY_aquarius_exp_4k.caq
	rm _TINY_aquarius_exp_4k.caq
	mv TINY_aquarius_exp_4k.tar.zip $(BUILD_PATH)

aquarius_hello_world:
	$(Z88DK_PATH)$(MYZ88DK) +aquarius $(SCCZ80_OPTS) -clib=ansi $(INCLUDE_OPTS) -vn \
	$(SOURCE_PATH)/../test/hello_conio.c \
	-create-app


aquarius_hello_stack:
	$(Z88DK_PATH)$(MYZ88DK) +aquarius $(SCCZ80_OPTS) -pragma-redirect:fputc_cons=fputc_cons_generic -pragma-output:STACKPTR=20000 $(INCLUDE_OPTS) -vn \
	$(SOURCE_PATH)/../test/hello_fputc.c \
	-create-app -o minimal_hello


aquarius_exp_16k: 
	$(Z88DK_PATH)$(MYZ88DK) +aquarius $(SCCZ80_OPTS) -clib=ansi $(INCLUDE_OPTS) -vn \
	-DSOUNDS -D__AQUARIUS__ -DFULL_GAME -DEND_SCREEN -DBETWEEN_LEVEL \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-create-app	\
	-o FULL_aquarius_exp_16k
	rm FULL_aquarius_exp_16k
	tar czvf FULL_aquarius_exp_16k.tar.zip FULL_aquarius_exp_16k.caq _FULL_aquarius_exp_16k.caq
	rm FULL_aquarius_exp_16k.caq
	rm _FULL_aquarius_exp_16k.caq
	mv FULL_aquarius_exp_16k.tar.zip $(BUILD_PATH)	


vz200_8k:
	$(Z88DK_PATH)$(MYZ88DK) +vz $(ZSDCC_OPTS) \
	-DTINY_GAME \
	-DINITIAL_SLOWDOWN=31500 \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma.inc \
	-compiler=sdcc \
	--opt-code-size \
	$(INCLUDE_OPTS) \
	-D__VZ__ -clib=ansi \
	-DLESS_TEXT \
	-DNO_BLINKING \
	-DNO_RANDOM_LEVEL \
	-DNO_DEAD_GHOSTS \
	-DFORCE_GHOSTS_NUMBER=4 \
	-DFORCE_BOMBS_NUMBER=2 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_STATS \
	-DNO_INITIAL_SCREEN \
	-DNO_MESSAGE \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app -o $(BUILD_PATH)/TINY_vz200_8k.vz \
	$(TINY_FILES) 
	rm $(BUILD_PATH)/TINY_vz200_8k.cas


vz200_18k: 	
	$(Z88DK_PATH)$(MYZ88DK) +vz $(ZSDCC_OPTS) -vn \
	-compiler=sdcc \
	$(INCLUDE_OPTS) \
	-DSOUNDS -D__VZ__ -clib=ansi \
	-DFULL_GAME \
	-DINITIAL_SLOWDOWN=31500 \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	-create-app -o $(BUILD_PATH)/FULL_vz200_18k.vz \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_vz200_18k.cas


laser500: 	
	$(Z88DK_PATH)$(MYZ88DK) +laser500 $(SCCZ80_OPTS) -vn -create-app -Cz--audio \
	$(INCLUDE_OPTS) \
	-D__LASER500__ \
	-DFULL_GAME \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	$(FULL_FILES)
	mv a.bin $(BUILD_PATH)/FULL_vz500.bin
	rm a.cas
	mv a.wav $(BUILD_PATH)/FULL_vz500.wav
	

vz200_sprites_18k:
	$(Z88DK_PATH)$(MYZ88DK) +vz $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DSOUNDS \
	-DINITIAL_SLOWDOWN=31500 \
	-D__VZ__ \
	-DFULL_GAME \
	-create-app -o $(BUILD_PATH)/FULL_vz200_sprites_18k.vz \
	-vn -lndos \
	-DALT_PRINT \
	-DFORCE_NARROW \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_vz200_sprites_18k.cas	
	

vz700: 	
	$(Z88DK_PATH)$(MYZ88DK) +vz700 $(ZSDCC_OPTS) -vn \
	-compiler=sdcc \
	$(INCLUDE_OPTS) \
	-DSOUNDS -D__VZ__ -clib=ansi \
	-DFULL_GAME \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	-create-app -o $(BUILD_PATH)/FULL_vz350.vz \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_vz700.cas	
	
	
vz200_24k: 
	$(Z88DK_PATH)$(MYZ88DK) +vz $(SCCZ80_OPTS) $(INCLUDE_OPTS) -vn \
	-DSOUNDS -D__VZ__ -DFULL_GAME -DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO -DNO_INIT_GRAPHICS \
	-clib=ansi -lndos -create-app -o  $(BUILD_PATH)/FULL_vz200_24k.vz \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_vz200_24k.cas


vg5k:
	$(Z88DK_PATH)$(MYZ88DK) +vg5k $(ZSDCC_OPTS) \
	-compiler=sdcc \
	$(INCLUDE_OPTS) \
	--opt-code-size \
	--reserve-regs-iy \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	-DNO_BLINKING \
	-DNO_CONTROL_INSTRUCTIONS \
	-DNO_HINTS \
	-DALT_SLEEP \
	-DNO_RANDOM_LEVEL \
	-DFLAT_ENEMIES \
	-DFORCE_NARROW \
	-vn -DFULL_GAME -D__VG5K__ \
	-DLESS_TEXT \
	-DFORCE_GHOSTS_NUMBER=8 \
	-DFORCE_BOMBS_NUMBER=4 \
	-DSOUNDS \
	-DSIMPLE_STRATEGY \
	-create-app -o $(BUILD_PATH)/FULL_vg5k_less_text.prg \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/sleep/sleep_macros.c
	rm $(BUILD_PATH)/FULL_vg5k_less_text.prg	

vg5k_udg:
	$(Z88DK_PATH)$(MYZ88DK) +vg5k $(ZSDCC_OPTS) \
	-compiler=sdcc \
	$(INCLUDE_OPTS) \
	--reserve-regs-iy \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	-vn -DFULL_GAME -D__VG5K__ \
	-DINITIAL_SLOWDOWN=29000 \
	-DLESS_TEXT \
	-DUDG_GRAPHICS \
	-DANIMATE_PLAYER \
	-DFORCE_GHOSTS_NUMBER=8 \
	-DFORCE_BOMBS_NUMBER=4 \
	-DSOUNDS \
	-DSIMPLE_STRATEGY \
	-create-app -o $(BUILD_PATH)/FULL_vg5k_udg_less_text.prg \
	-DCONIO \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_vg5k_udg_less_text.prg		
	

vg5k_exp_16k_udg:
	$(Z88DK_PATH)$(MYZ88DK) +vg5k $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DSOUNDS -vn -DFULL_GAME -D__VG5K__ -DBETWEEN_LEVEL -DEND_SCREEN -DASM_DISPLAY \
	-lndos -create-app -o $(BUILD_PATH)/FULL_vg5k_exp_16k_udg.prg \
	-DCONIO \
	-DINITIAL_SLOWDOWN=29000 \
	-clib=default \
	-DUDG_GRAPHICS \
	-DANIMATE_PLAYER \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_vg5k_exp_16k_udg.prg	

vg5k_exp_16k:
	$(Z88DK_PATH)$(MYZ88DK) +vg5k $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DSOUNDS -vn -DFULL_GAME -D__VG5K__ -DBETWEEN_LEVEL -DEND_SCREEN -DASM_DISPLAY \
	-lndos -create-app -o $(BUILD_PATH)/FULL_vg5k_exp_16k.prg \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_vg5k_exp_16k.prg	

ace_exp_16k_udg:
	$(Z88DK_PATH)$(MYZ88DK) +ace $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__ACE__ -DFULL_GAME -DBETWEEN_LEVEL -DEND_SCREEN \
	-DSOUNDS \
	-DCONIO \
	-clib=default \
	-DUDG_GRAPHICS \
	-DANIMATE_PLAYER \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-o full -Cz--audio -create-app	
	cp full.wav $(BUILD_PATH)/FULL_ace_exp_16k_udg.wav
	rm full.wav
	rm full.tap
	rm full
	
	
ace_exp_16k:
	$(Z88DK_PATH)$(MYZ88DK) +ace $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__ACE__ -DFULL_GAME -DBETWEEN_LEVEL -DEND_SCREEN \
	-DSOUNDS \
	-DCONIO -DNO_INIT_GRAPHICS \
	-clib=ansi -o full -Cz--audio -create-app \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	cp full.wav $(BUILD_PATH)/FULL_ace_exp_16k.wav
	rm full.wav
	rm full.tap
	rm full


zx80_16k:
	$(Z88DK_PATH)$(MYZ88DK) +zx80 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -vn \
	-D__ZX80__ -DFULL_GAME \
	-DEND_SCREEN \
	-DALT_SLEEP \
	-DCONIO \
	-DZX80_GEN_TV_FIELD \
	-lndos \
	-create-app -o  $(BUILD_PATH)/FULL_zx80_16k.prg \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/zx80/zx80_init_graphics.c \
	$(CROSS_LIB_PATH)/sleep/sleep_macros.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_zx80_16k.prg	
	
zx80_16k_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +zx80 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -vn \
	-D__ZX80__ -DFULL_GAME \
	-DEND_SCREEN \
	-DTURN_BASED \
	-DALT_SLEEP \
	-DCONIO \
	-DNO_INIT_GRAPHICS \
	-lndos \
	-create-app -o  $(BUILD_PATH)/FULL_zx80_16k_turn_based.prg \
	$(CROSS_LIB_PATH)/sleep/sleep_macros.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_zx80_16k_turn_based.prg
	

zx80_16k_turn_based_qaopm:
	$(Z88DK_PATH)$(MYZ88DK) +zx80 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -vn \
	-D__ZX80__ -DFULL_GAME \
	-DZ88DK_JOYSTICK \
	-DEND_SCREEN \
	-DTURN_BASED \
	-DALT_SLEEP \
	-DCONIO \
	-DNO_INIT_GRAPHICS \
	-lndos \
	-create-app -o  $(BUILD_PATH)/FULL_zx80_16k_turn_based_qaopm.prg \
	$(CROSS_LIB_PATH)/sleep/sleep_macros.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_zx80_16k_turn_based_qaopm.prg


zx81_16k_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +zx81 $(ZSDCC_OPTS) \
	-compiler=sdcc \
	$(INCLUDE_OPTS) \
	\
	-D__ZX81__ -DFULL_GAME -DEND_SCREEN -DBETWEEN_LEVEL \
	-DTURN_BASED \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	-create-app -o  $(BUILD_PATH)/FULL_zx81_16k_turn_based.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_zx81_16k_turn_based.prg


zx81_16k_turn_based_qaopm:
	$(Z88DK_PATH)$(MYZ88DK) +zx81 $(ZSDCC_OPTS) \
	-compiler=sdcc \
	$(INCLUDE_OPTS) \
	\
	-D__ZX81__ -DFULL_GAME -DEND_SCREEN -DBETWEEN_LEVEL \
	-DZ88DK_JOYSTICK \
	-DTURN_BASED \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	-create-app -o  $(BUILD_PATH)/FULL_zx81_16k_turn_based_qaopm.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_zx81_16k_turn_based_qaopm.prg

LD_PATH)/getk_test.prg
	
zx81_16k:
	$(Z88DK_PATH)$(MYZ88DK) +zx81 $(ZSDCC_OPTS) \
	$(INCLUDE_OPTS) \
	-compiler=sdcc \
	--opt-code-size \
	-vn \
	-D__ZX81__ -DFULL_GAME \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	-create-app -o  $(BUILD_PATH)/FULL_zx81_16k.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_zx81_16k.prg
	

zx81_16k_qaopm:
	$(Z88DK_PATH)$(MYZ88DK) +zx81 $(ZSDCC_OPTS) \
	$(INCLUDE_OPTS) \
	-compiler=sdcc \
	--opt-code-size \
	-vn \
	-D__ZX81__ -DFULL_GAME \
	-DZ88DK_JOYSTICK \
	-DQAOPM \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	-create-app -o  $(BUILD_PATH)/FULL_zx81_16k_qaopm.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_zx81_16k_qaopm.prg
	


zx81_16k_wrx:
	$(Z88DK_PATH)$(MYZ88DK) +zx81 $(SCCZ80_OPTS) -subtype=wrx -clib=wrx \
	$(INCLUDE_OPTS) -O3 $(ULTRA_DRAW_SKIP) \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib_no_printf.inc \
	-DALT_MODE \
	-DANIMATE_PLAYER \
	-DFORCE_GHOSTS_NUMBER=6 \
	-DINITIAL_SLOWDOWN=15000 \
	-DFORCE_XSIZE=36 \
	-DFORCE_YSIZE=35 \
	-vn \
	-D__ZX81__ \
	-DZ88DK_SPRITES \
	-DLESS_PRINT \
	-lndos \
	-DANIMATE_PLAYER \
	-DNO_BLINKING \
	-DLESS_TEXT \
	-DNO_COLOR \
	-DSIMPLE_STRATEGY \
	-DNO_SET_SCREEN_COLORS \
	-DALT_PRINT \
	-DFEWER_SPRITES \
	-DNO_SMALL_LETTERS \
	-create-app -o  $(BUILD_PATH)/LIGHT_zx81_16k_wrx.prg \
	$(LIGHT_FILES) \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/zx81/zx81_init_graphics.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c
	rm $(BUILD_PATH)/LIGHT_zx81_16k_wrx.prg


zx81_16k_wrx_qaopm:
	$(Z88DK_PATH)$(MYZ88DK) +zx81 $(SCCZ80_OPTS) -subtype=wrx -clib=wrx \
	$(INCLUDE_OPTS) -O3 $(ULTRA_DRAW_SKIP) \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib_no_printf.inc \
	-DZ88DK_JOYSTICK \
	-DANIMATE_PLAYER \
	-DFORCE_GHOSTS_NUMBER=6 \
	-DINITIAL_SLOWDOWN=15000 \
	-DFORCE_XSIZE=36 \
	-DFORCE_YSIZE=35 \
	-vn \
	-D__ZX81__ \
	-DZ88DK_SPRITES \
	-DQAOPM \
	-DLESS_PRINT \
	-lndos \
	-DANIMATE_PLAYER \
	-DNO_BLINKING \
	-DLESS_TEXT \
	-DNO_COLOR \
	-DSIMPLE_STRATEGY \
	-DNO_SET_SCREEN_COLORS \
	-DALT_PRINT \
	-DFEWER_SPRITES \
	-DNO_SMALL_LETTERS \
	-create-app -o  $(BUILD_PATH)/LIGHT_zx81_16k_wrx_qaopm.prg \
	$(LIGHT_FILES) \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/zx81/zx81_init_graphics.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c
	rm $(BUILD_PATH)/LIGHT_zx81_16k_wrx_qaopm.prg


zx81_32k_wrx:
	$(Z88DK_PATH)$(MYZ88DK) +zx81 $(SCCZ80_OPTS) -subtype=wrx -clib=wrx \
	$(INCLUDE_OPTS) -O3 $(ULTRA_DRAW_SKIP) \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib_no_printf.inc \
	-pragma-define:hrgpage=36096 \
	-DFORCE_GHOSTS_NUMBER=6 \
	-DINITIAL_SLOWDOWN=15000 \
	-DANIMATE_PLAYER \
	-DNO_BLINKING \
	-DFORCE_XSIZE=36 \
	-DFORCE_YSIZE=35 \
	-vn \
	-D__ZX81__ \
	-DZ88DK_SPRITES \
	-DLESS_PRINT \
	-DFULL_GAME \
	-lndos \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-DNO_COLOR \
	-DSIMPLE_STRATEGY \
	-DALT_MOVE \
	-DNO_SET_SCREEN_COLORS \
	-DALT_PRINT \
	-DFEWER_SPRITES \
	-DNO_SMALL_LETTERS \
	-create-app -o  $(BUILD_PATH)/FULL_zx81_32k_wrx.prg \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/zx81/zx81_init_graphics.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c
	rm $(BUILD_PATH)/FULL_zx81_32k_wrx.prg

zx81_32k_wrx_qaopm:
	$(Z88DK_PATH)$(MYZ88DK) +zx81 $(SCCZ80_OPTS) -subtype=wrx -clib=wrx \
	$(INCLUDE_OPTS) -O3 $(ULTRA_DRAW_SKIP) \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib_no_printf.inc \
	-pragma-define:hrgpage=36096 \
	-DFORCE_GHOSTS_NUMBER=6 \
	-DINITIAL_SLOWDOWN=15000 \
	-DANIMATE_PLAYER \
	-DNO_BLINKING \
	-DFORCE_XSIZE=36 \
	-DFORCE_YSIZE=35 \
	-DZ88DK_JOYSTICK \
	-DQAOPM \
	-vn \
	-D__ZX81__ \
	-DZ88DK_SPRITES \
	-DLESS_PRINT \
	-DFULL_GAME \
	-lndos \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-DNO_COLOR \
	-DSIMPLE_STRATEGY \
	-DNO_SET_SCREEN_COLORS \
	-DALT_PRINT \
	-DFEWER_SPRITES \
	-DNO_SMALL_LETTERS \
	-create-app -o  $(BUILD_PATH)/FULL_zx81_32k_wrx_qaopm.prg \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/zx81/zx81_init_graphics.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c
	rm $(BUILD_PATH)/FULL_zx81_32k_wrx_qaopm.prg


zx81_32k_wrx_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +zx81 $(SCCZ80_OPTS) -subtype=wrx -clib=wrx \
	$(INCLUDE_OPTS) -O3 \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib_no_printf.inc \
	-pragma-define:hrgpage=36096 \
	-DFORCE_GHOSTS_NUMBER=9 \
	-DANIMATE_PLAYER \
	-DNO_BLINKING \
	-DTURN_BASED \
	-DFORCE_XSIZE=36 \
	-DFORCE_YSIZE=35 \
	-vn \
	-D__ZX81__ \
	-DZ88DK_SPRITES \
	-DLESS_PRINT \
	-DFULL_GAME \
	-lndos \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-DNO_COLOR \
	-DSIMPLE_STRATEGY \
	-DNO_SET_SCREEN_COLORS \
	-DALT_PRINT \
	-DFEWER_SPRITES \
	-DNO_SMALL_LETTERS \
	-create-app -o  $(BUILD_PATH)/FULL_zx81_32k_wrx_turn_based.prg \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/zx81/zx81_init_graphics.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c
	rm $(BUILD_PATH)/FULL_zx81_32k_wrx_turn_based.prg


zx81_32k_wrx_turn_based_qaopm:
	$(Z88DK_PATH)$(MYZ88DK) +zx81 $(SCCZ80_OPTS) -subtype=wrx -clib=wrx \
	$(INCLUDE_OPTS) -O3 \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib_no_printf.inc \
	-pragma-define:hrgpage=36096 \
	-DZ88DK_JOYSTICK \
	-DQAOPM \
	-DFORCE_GHOSTS_NUMBER=9 \
	-DANIMATE_PLAYER \
	-DNO_BLINKING \
	-DTURN_BASED \
	-DFORCE_XSIZE=36 \
	-DFORCE_YSIZE=35 \
	-vn \
	-D__ZX81__ \
	-DZ88DK_SPRITES \
	-DLESS_PRINT \
	-DFULL_GAME \
	-lndos \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-DNO_COLOR \
	-DSIMPLE_STRATEGY \
	-DNO_SET_SCREEN_COLORS \
	-DALT_PRINT \
	-DFEWER_SPRITES \
	-DNO_SMALL_LETTERS \
	-create-app -o  $(BUILD_PATH)/FULL_zx81_32k_wrx_turn_based_qaopm.prg \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/zx81/zx81_init_graphics.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c
	rm $(BUILD_PATH)/FULL_zx81_32k_wrx_turn_based_qaopm.prg

zx81_wrx_targets: \
    zx81_16k_wrx zx81_32k_wrx zx81_32k_wrx_turn_based

zx81_16k_wrx_zsdcc:
	$(Z88DK_PATH)$(MYZ88DK) +zx81 $(ZSDCC_OPTS) -subtype=wrx -clib=wrx \
	$(INCLUDE_OPTS) \
	-compiler=sdcc \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib_no_printf.inc \
    -DANIMATE_PLAYER \
	-DFORCE_XSIZE=36 \
	-DFORCE_YSIZE=30 \
	-vn \
	-D__ZX81__ \
	-DZ88DK_SPRITES \
	-DLESS_PRINT \
	-lndos \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-DNO_COLOR \
	-DNO_RANDOM_LEVEL \
	-DSIMPLE_STRATEGY \
	-DALT_MOVE \
	-DNO_CONTROL_INSTRUCTIONS \
	-DNO_SET_SCREEN_COLORS \
	-DNO_WAIT \
	-DNO_SLEEP \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	-create-app -o  $(BUILD_PATH)/LIGHT_zx81_16k_wrx.prg \
	$(LIGHT_FILES) \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/zx81/zx81_init_graphics.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c
	rm $(BUILD_PATH)/LIGHT_zx81_16k_wrx.prg

lambda_16k:
	$(Z88DK_PATH)$(MYZ88DK) +lambda $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-vn -D__LAMBDA__ -DFULL_GAME \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o  $(BUILD_PATH)/FULL_lambda_16k.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_lambda_16k.prg		


cpc:
	$(Z88DK_PATH)$(MYZ88DK) +cpc $(SCCZ80_OPTS) $(INCLUDE_OPTS) -DANIMATE_PLAYER -vn  -clib=ansi \
	-D__CPC__ \
	-DZ88DK_JOYSTICK \
	-DSOUNDS -DFULL_GAME -DBETWEEN_LEVEL -DEND_SCREEN \
	-DCPCRSLIB \
	-pragma-define:REGISTER_SP=-1 \
	-lndos -create-app -o 	$(BUILD_PATH)/FULL_cpc.prg \
	-DCPCRSLIB_GRAPHICS \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/cpc_Chars8.asm \
	$(CROSS_LIB_PATH)/sound/z88dk/psg/psg_sounds.c \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/cpc/cpc_cpcrslib_init_graphics.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	$(TOOLS_PATH)/z88dk/cpc/2cdt.exe -n -r cross_chase $(BUILD_PATH)/FULL_cpc.cpc  $(BUILD_PATH)/FULL_cpc.cdt
	rm -rf FULL_cpc.dsk
	$(TOOLS_PATH)/z88dk/cpc/cpcxfsw -nd FULL_cpc.dsk
	$(TOOLS_PATH)/z88dk/cpc/cpcxfsw FULL_cpc.dsk -p $(BUILD_PATH)/FULL_cpc.cpc xchase
	mv FULL_cpc.dsk $(BUILD_PATH)/
	cp $(TOOLS_PATH)/z88dk/cpc/nocart/*.rom .
	$(TOOLS_PATH)/z88dk/cpc/nocart/nocart.exe  $(BUILD_PATH)/FULL_cpc.dsk  $(BUILD_PATH)/FULL_gx4000.cpr   -c 'run"xchase'
	rm os.rom
	rm amsdos.rom
	rm basic.rom
	rm $(BUILD_PATH)/FULL_cpc.cpc 
	rm $(BUILD_PATH)/FULL_cpc.prg		


msx_32k:
	$(Z88DK_PATH)$(MYZ88DK) +msx $(SCCZ80_OPTS) $(INCLUDE_OPTS) -lmsxbios \
	-DUSE_MSX_BIOS \
	-DINITIAL_SLOWDOWN=29000 \
	-DSOUNDS -DANIMATE_PLAYER \
	-vn -DMSX_VPOKE -DFULL_GAME -D__MSX__ -DEND_SCREEN -DBETWEEN_LEVEL \
	-lndos \
	-create-app -o $(BUILD_PATH)/FULL_msx_32k.prg \
	-DMEMORY_MAPPED \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	-DLESS_TEXT \
	-DZ88DK_JOYSTICK \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/msx/msx_redefined_chars_init_graphics.c	\
	$(CROSS_LIB_PATH)/sound/z88dk/psg/psg_sounds.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_msx_32k.prg 


msx_32k_rom:
	$(Z88DK_PATH)$(MYZ88DK) +msx $(SCCZ80_OPTS) $(INCLUDE_OPTS) -lmsxbios \
	-DUSE_MSX_BIOS \
	-DINITIAL_SLOWDOWN=29000 \
	-DSOUNDS -DANIMATE_PLAYER \
	-vn -DMSX_VPOKE -DFULL_GAME -D__MSX__ -DEND_SCREEN -DBETWEEN_LEVEL \
	-lndos -subtype=rom \
	-create-app -o $(BUILD_PATH)/FULL_msx_32k.rom \
	-DMEMORY_MAPPED \
	-DDEFAULT_CLEAR_SCREEN \
	-DALT_PRINT \
	-DLESS_TEXT \
	-DZ88DK_JOYSTICK \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/msx/msx_redefined_chars_init_graphics.c	\
	$(CROSS_LIB_PATH)/sound/z88dk/psg/psg_sounds.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_msx_32k_BSS.bin
	rm $(BUILD_PATH)/FULL_msx_32k_DATA.bin

svi_318_mode0:
	$(Z88DK_PATH)$(MYZ88DK) +svi $(SCCZ80_OPTS) $(INCLUDE_OPTS) -zorg=49200 -vn -lndos \
	-D__SVI__ -DMSX_MODE0 \
	-DSOUNDS \
	-create-app \
	$(CROSS_LIB_PATH)/sound/z88dk/psg/psg_sounds.c \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/svi/svi_graphics.c \
	$(LIGHT_FILES)
	mv a.cas $(BUILD_PATH)/LIGHT_svi_318_mode0.cas
	rm a.bin


svi_318:
	$(Z88DK_PATH)$(MYZ88DK) +svi $(ZSDCC_OPTS) \
	$(INCLUDE_OPTS) \
	-compiler=sdcc \
	-DFORCE_CONIO_LIB \
	-zorg=49152 \
	-clib=ansi \
	-pragma-define:ansicolumns=32 \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	-vn -lndos \
	-D__SVI__ \
	-DSOUNDS \
	-DFORCE_BIT_BANG \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app \
	$(LIGHT_FILES)
	mv a.cas $(BUILD_PATH)/LIGHT_svi_318.cas
	rm a.bin


svi_328_udg_cursor:
	$(Z88DK_PATH)$(MYZ88DK) +svi $(SCCZ80_OPTS) \
	-DZ88DK_JOYSTICK \
	-DUDG_GRAPHICS \
	-DANIMATE_PLAYER \
	-pragma-redirect:fputc_cons=fputc_cons_generic $(INCLUDE_OPTS) \
	 -vn -lndos \
	-DSOUNDS \
	-DFULL_GAME -D__SVI__ -DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO \
	-DFORCE_CONIO_LIB \
	-pragma-define:ansicolumns=32 \
	-create-app \
	$(CROSS_LIB_PATH)/sound/z88dk/psg/psg_sounds.c  \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv a.cas $(BUILD_PATH)/FULL_svi_328_udg.cas
	rm a.bin
	
svi_328:
	$(Z88DK_PATH)$(MYZ88DK) +svi $(SCCZ80_OPTS) -pragma-define:ansicolumns=32 -clib=ansi $(INCLUDE_OPTS) \
	-vn -lndos \
	-DSOUNDS \
	-DFULL_GAME -D__SVI__ -DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DFORCE_CONIO_LIB \
	-create-app \
	$(CROSS_LIB_PATH)/sound/z88dk/psg/psg_sounds.c  \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv a.cas $(BUILD_PATH)/FULL_svi_328.cas
	rm a.bin
	

sc3000_16k:
	$(Z88DK_PATH)$(MYZ88DK) +sc3000 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DZ88DK_JOYSTICK \
	-clib=ansi \
	-D__SC3000__ \
	-DCONIO -DNO_INIT_GRAPHICS \
	-pragma-define:ansicolumns=32 \
	-vn -lndos -create-app -Cz--audio \
	-o $(BUILD_PATH)/LIGHT_sc3000_16k.prg \
	$(LIGHT_FILES)
	rm $(BUILD_PATH)/LIGHT_sc3000_16k.prg
	rm $(BUILD_PATH)/LIGHT_sc3000_16k.tap

sc3000_32k_udg:
	$(Z88DK_PATH)$(MYZ88DK) +sc3000 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__SC3000__ \
	-DFULL_GAME \
	-DSOUNDS \
	-DFORCE_BIT_BANG \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DZ88DK_JOYSTICK \
	-DCONIO \
	-vn -lndos -create-app -Cz--audio \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	-o $(BUILD_PATH)/FULL_sc3000_32k_udg.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_sc3000_32k_udg.prg
	rm $(BUILD_PATH)/FULL_sc3000_32k_udg.tap	
	
sg1000_udg:
	$(Z88DK_PATH)$(MYZ88DK) +sc3000 $(SCCZ80_OPTS) -subtype=rom \
	$(INCLUDE_OPTS) \
	-D__SC3000__ \
	-DZ88DK_JOYSTICK \
	-DFULL_GAME \
	-DSOUNDS \
	-DFORCE_BIT_BANG \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO \
	-vn -lndos -create-app \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	-o $(BUILD_PATH)/FULL_sg1000_udg.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_sg1000_udg.prg
	rm $(BUILD_PATH)/FULL_sg1000_udg_BSS.bin
	rm $(BUILD_PATH)/FULL_sg1000_udg_DATA.bin
	
	
sc3000_32k:
	$(Z88DK_PATH)$(MYZ88DK) +sc3000 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DFULL_GAME -DEND_SCREEN -DBETWEEN_LEVEL \
	-clib=ansi \
	-DCONIO -DNO_INIT_GRAPHICS \
	-pragma-define:ansicolumns=32 \
	-vn -lndos -create-app -Cz--audio \
	-o $(BUILD_PATH)/FULL_sc3000_32k.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_sc3000_32k.prg
	rm $(BUILD_PATH)/FULL_sc3000_32k.tap	

	
sg1000:
	$(Z88DK_PATH)$(MYZ88DK) +sc3000 $(SCCZ80_OPTS) -subtype=rom \
	$(INCLUDE_OPTS) \
	-DFULL_GAME -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-clib=ansi \
	-pragma-define:ansicolumns=32 \
	-vn -lndos -create-app \
	-o $(BUILD_PATH)/FULL_sg1000.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_sg1000.prg
	rm $(BUILD_PATH)/FULL_sg1000_BSS.bin
	rm $(BUILD_PATH)/FULL_sg1000_DATA.bin


mz:
	$(Z88DK_PATH)$(MYZ88DK) +mz $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__MZ__ -clib=ansi -pragma-define:ansicolumns=32 -vn \
	-DFULL_GAME -DSOUNDS  -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-pragma-define:REGISTER_SP=0xd000 \
	-lndos -create-app -o $(BUILD_PATH)/FULL_mz.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_mz.prg
	mv $(BUILD_PATH)/FULL_mz.mzt $(BUILD_PATH)/FULL_mz.mzf
	
microbee_16k:
	$(Z88DK_PATH)$(MYZ88DK) +bee $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__BEE__ -clib=ansi -vn -DSOUNDS  \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/LIGHT_microbee_16k.prg  \
	$(LIGHT_FILES)
	rm $(BUILD_PATH)/LIGHT_microbee_16k.prg
	
microbee_32k:
	$(Z88DK_PATH)$(MYZ88DK) +bee $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__BEE__ \
	-clib=ansi \
	-vn \
	-DFULL_GAME -DSOUNDS  -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/FULL_microbee_32k.prg  \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_microbee_32k.prg

microbee_32k_wav:
	$(Z88DK_PATH)$(MYZ88DK) +bee $(SCCZ80_OPTS) $(INCLUDE_OPTS) -subtype=wav \
	-D__BEE__ \
	-clib=ansi \
	-vn \
	-DFULL_GAME -DSOUNDS  -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/FULL_microbee_32k.prg  \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_microbee_32k.prg	
	
	
# import as data into ram at 32768 - call 32768
samcoupe:
	$(Z88DK_PATH)$(MYZ88DK) +sam $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__SAM__ -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-clib=ansi -pragma-define:ansicolumns=32 -vn \
	-DFULL_GAME  -o $(BUILD_PATH)/FULL_samcoupe.bin -lndos \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	cp $(TOOLS_PATH)/z88dk/samcoupe/samdos2_empty $(TOOLS_PATH)/z88dk/samcoupe/samdos2
	$(TOOLS_PATH)/z88dk/samcoupe/pyz80.py -I $(TOOLS_PATH)/z88dk/samcoupe/samdos2 $(TOOLS_PATH)/z88dk/samcoupe/sam_wrapper.asm
	mv $(TOOLS_PATH)/z88dk/samcoupe/sam_wrapper.dsk $(BUILD_PATH)/FULL_samcoupe.dsk
	rm $(BUILD_PATH)/FULL_samcoupe.bin


sms_tiny_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +sms $(SCCZ80_OPTS) -clib=sdcc_iy -startup=17 \
	$(INCLUDE_OPTS) \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_sms.inc \
	-D__SMS__ \
	-DNO_COLOR \
	-DTINY_GAME \
	-DSTDLIB \
	-DLESS_TEXT \
	-create-app \
	-DBUFFERED \
	-DTURN_BASED \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	-DNO_SLEEP \
	-DNO_WAIT \
	-o $(BUILD_PATH)/TINY_sms_buffered.bin \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/sms/sms_init_graphics.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(TINY_FILES)
	rm $(BUILD_PATH)/TINY_sms_buffered_CODE.bin
	rm $(BUILD_PATH)/TINY_sms_buffered_DATA.bin
	rm $(BUILD_PATH)/TINY_sms_buffered_BSS.bin
	rm $(BUILD_PATH)/TINY_sms_buffered_UNASSIGNED.bin
	
    
gamegear_tiny_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +sms $(SCCZ80_OPTS) -lgamegear -clib=sdcc_iy -startup=17 \
	$(INCLUDE_OPTS) \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_sms.inc \
	-DFORCE_XSIZE=20 \
	-DFORCE_YSIZE=16 \
	-D__SMS__ \
	-DNO_COLOR \
	-DTINY_GAME \
	-DSTDLIB \
	-DLESS_TEXT \
	-create-app \
	-DBUFFERED \
	-DTURN_BASED \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	-DNO_SLEEP \
	-DNO_WAIT \
	-o $(BUILD_PATH)/TINY_gamegear_buffered.bin \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/sms/sms_init_graphics.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(TINY_FILES)
	rm $(BUILD_PATH)/TINY_gamegear_buffered_CODE.bin
	rm $(BUILD_PATH)/TINY_gamegear_buffered_DATA.bin
	rm $(BUILD_PATH)/TINY_gamegear_buffered_BSS.bin
	rm $(BUILD_PATH)/TINY_gamegear_buffered_UNASSIGNED.bin    

mtx_udg:
	$(Z88DK_PATH)$(MYZ88DK) +mtx $(SCCZ80_OPTS) -startup=2 $(INCLUDE_OPTS) \
	-D__MTX__ \
	-create-app -o FULL.bin -vn \
	-DFULL_GAME -DSOUNDS  -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm FULL.bin
	mv FULL.wav $(BUILD_PATH)/FULL_mtx_udg.wav
	mv FULL $(BUILD_PATH)/FULL_mtx_udg.mtx
	
mtx:
	$(Z88DK_PATH)$(MYZ88DK) +mtx $(SCCZ80_OPTS) -startup=2 $(INCLUDE_OPTS) \
	-D__MTX__ -clib=ansi -pragma-define:ansicolumns=32 -create-app  \
	-DFULL_GAME -DSOUNDS  -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm a.bin
	mv a.wav $(BUILD_PATH)/
	mv a $(BUILD_PATH)/a.mtx

	
abc80_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +abc80 $(SCCZ80_OPTS) -lm -subtype=hex -zorg=49200 $(INCLUDE_OPTS) \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DTINY_GAME \
	-DNO_WAIT \
	-D__ABC80__ -clib=ansi -vn  -lndos -create-app -o a \
	$(TINY_FILES)
	#rm a
	mv a.ihx $(BUILD_PATH)/TINY_abc80.ihx 
	
abc80_light:
	$(Z88DK_PATH)$(MYZ88DK) +abc80 $(SCCZ80_OPTS) -lm \
	-subtype=hex \
	-zorg=49200 $(INCLUDE_OPTS) \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DNO_WAIT \
	-D__ABC80__ -clib=ansi -vn  -lndos -create-app  \
	$(LIGHT_FILES)
	# mv a.bin $(BUILD_PATH)/LIGHT_abc80.bin
	mv a.ihx $(BUILD_PATH)/LIGHT_abc80.ihx 
	# $(TOOLS_PATH)/z88dk/abc80/bin2abc --bac80 -o $(BUILD_PATH)/xchase.bac -s 49200 a.bin
	# $(TOOLS_PATH)/z88dk/abc80/dosgen$(COMPILEDEXT) $(BUILD_PATH)/LIGHT_abc80.dsk 
	# $(TOOLS_PATH)/z88dk/abc80/doscopy$(COMPILEDEXT) $(BUILD_PATH)/LIGHT_abc80.dsk -b $(BUILD_PATH)/xchase.bac
	mv a.bin $(BUILD_PATH)/LIGHT_abc80.bin
	
abc800_light:
	$(Z88DK_PATH)$(MYZ88DK) +abc800 $(SCCZ80_OPTS) -lm \
	-zorg=49200 $(INCLUDE_OPTS) \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DCONIO_VT100 \
	-DNO_WAIT \
	-D__ABC80__ -vn  -lndos  \
	$(LIGHT_FILES)
	$(TOOLS_PATH)/z88dk/abc80/bin2bac2$(COMPILEDEXT) -800 a.bin $(BUILD_PATH)/LIGHT_ABC800.bac 49200	
	mv a.bin $(BUILD_PATH)/LIGHT_abc800.bin 
	


abc80:
	$(Z88DK_PATH)$(MYZ88DK) +abc80 $(SCCZ80_OPTS) -lm -subtype=hex -zorg=49200 \
	$(INCLUDE_OPTS) \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	-D__ABC80__ -clib=ansi -vn -DFULL_GAME \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DLESS_TEXT \
	-DSIMPLE_STRATEGY \
	-DNO_BLINKING \
	-DNO_HINTS \
	-DNO_WAIT \
	-DNO_BORDER \
	-DNO_RANDOM_LEVEL \
	-DNO_SET_SCREEN_COLORS \
	-DNO_SLEEP \
	-DFLAT_ENEMIES \
	-lndos -create-app \
	$(FULL_FILES)
	# $(TOOLS_PATH)/z88dk/abc80/bin2bac2$(COMPILEDEXT) a.bin $(BUILD_PATH)/xchase.bac 49200
	# $(TOOLS_PATH)/z88dk/abc80/bin2abc --bac80 -o $(BUILD_PATH)/xchase.bac -s 49200 a.bin	
	# $(TOOLS_PATH)/z88dk/abc80/dosgen$(COMPILEDEXT) $(BUILD_PATH)/FULL_abc80.dsk 
	# $(TOOLS_PATH)/z88dk/abc80/doscopy$(COMPILEDEXT) $(BUILD_PATH)/FULL_abc80.dsk -b $(BUILD_PATH)/xchase.bac
	# rm a.bin 
	# mv $(BUILD_PATH)/xchase.bac $(BUILD_PATH)/FULL_abc80.bac
	mv a.ihx $(BUILD_PATH)/FULL_abc80.ihx 
	mv a.bin $(BUILD_PATH)/FULL_abc80.bin
	
	
abc800:
	$(Z88DK_PATH)$(MYZ88DK) +abc800 $(SCCZ80_OPTS) -lm -subtype=hex -zorg=49200 \
	$(INCLUDE_OPTS) \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	-DFORCE_CONIO_LIB \
	-D__ABC800__  -vn -DFULL_GAME \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DLESS_TEXT \
	-DSIMPLE_STRATEGY \
	-DNO_BLINKING \
	-DNO_HINTS \
	-DNO_WAIT \
	-DNO_BORDER \
	-DNO_CONTROL_INSTRUCTIONS \
	-DNO_RANDOM_LEVEL \
	-DNO_SET_SCREEN_COLORS \
	-DNO_SLEEP \
	-DFLAT_ENEMIES \
	-lndos -create-app \
	$(FULL_FILES)
	$(TOOLS_PATH)/z88dk/abc80/bin2bac2$(COMPILEDEXT) a.bin $(BUILD_PATH)/xchase.bac 49200
	$(TOOLS_PATH)/z88dk/abc80/dosgen$(COMPILEDEXT) $(BUILD_PATH)/FULL_abc800.dsk 
	$(TOOLS_PATH)/z88dk/abc80/doscopy$(COMPILEDEXT) $(BUILD_PATH)/FULL_abc800.dsk -b $(BUILD_PATH)/xchase.bac
	rm a.bin 
	rm $(BUILD_PATH)/xchase.bac
	mv a.ihx $(BUILD_PATH)/FULL_abc800.ihx 	

	
abc800_32k:
	$(Z88DK_PATH)$(MYZ88DK) +abc800 $(SCCZ80_OPTS) -lm  $(INCLUDE_OPTS) \
	-D__ABC80__ -vn -DFULL_GAME -DSOUNDS  -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DFORCE_CONIO_LIB -DNO_INIT_GRAPHICS \
	-lndos \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	
p2000_16k:
	$(Z88DK_PATH)$(MYZ88DK) +p2000 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi -D__P2000__ -vn \
	-DSOUNDS  \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/LIGHT_p2000.prg \
	$(LIGHT_FILES)
	rm $(BUILD_PATH)/LIGHT_p2000.prg


p2000_32k:
	$(Z88DK_PATH)$(MYZ88DK) +p2000 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi -D__P2000__ -vn \
	-DFULL_GAME -DSOUNDS  -DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/FULL_p2000.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_p2000.prg	
	

z9001_32k:
	$(Z88DK_PATH)$(MYZ88DK) +z9001 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi \
	-D__Z9001__ -vn -DFULL_GAME  -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/FULL_z9001.z80 \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_z9001.z80	

z9001_16k_full:
	$(Z88DK_PATH)$(MYZ88DK) +z9001 $(ZSDCC_OPTS) -compiler=sdcc $(INCLUDE_OPTS) -clib=ansi \
	-D__Z9001__ -vn -DFULL_GAME  \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DLESS_TEXT \
	-DNO_BLINKING \
	-DNO_RANDOM_LEVEL \
	-DNO_HINTS \
	-DSIMPLE_STRATEGY \
	-lndos -create-app -o $(BUILD_PATH)/FULL_z9001_less_text.z80 \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_z9001_less_text.z80
	
	
z9001_16k:
	$(Z88DK_PATH)$(MYZ88DK) +z9001 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi \
	-D__Z9001__ -vn   \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/LIGHT_z9001.z80 \
	$(LIGHT_FILES)
	rm $(BUILD_PATH)/LIGHT_z9001.z80	


mc1000_48k_joystick_udg:
	$(Z88DK_PATH)$(MYZ88DK) +mc1000 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-subtype=gaming \
	-DZ88DK_JOYSTICK \
	-DFULL_GAME  \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-DSOUND \
	-D__MC1000__ -DSOUNDS -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO \
	-vn  -lndos -create-app -Cz--audio \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv a.wav $(BUILD_PATH)/FULL_mc1000_48k_joystick_udg.wav
	mv a.bin $(BUILD_PATH)/FULL_mc1000_48k_joystick_udg.bin
	rm a.cas	
	
mc1000_48k_udg_joystick:
	$(Z88DK_PATH)$(MYZ88DK) +mc1000 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-subtype=gaming \
	-DZ88DK_JOYSTICK \
	-DFULL_GAME  \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-DSOUND \
	-D__MC1000__ -DSOUNDS -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO \
	-vn  -lndos -create-app -Cz--audio \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv a.wav $(BUILD_PATH)/FULL_mc1000_48k_udg_joystick.wav
	rm a.bin
	rm a.cas

mc1000_48k_udg:
	$(Z88DK_PATH)$(MYZ88DK) +mc1000 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-subtype=gaming \
	-DFULL_GAME  \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-DSOUND \
	-D__MC1000__ -DSOUNDS -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO \
	-vn  -lndos -create-app -Cz--audio \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv a.wav $(BUILD_PATH)/FULL_mc1000_48k_udg.wav
	rm a.bin
	rm a.cas	
	
mc1000_48k:
	$(Z88DK_PATH)$(MYZ88DK) +mc1000 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-subtype=gaming -pragma-define:ansicolumns=32 \
	-DFULL_GAME  \
	-clib=ansi \
	-D__MC1000__ -DSOUNDS -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-vn  -lndos -create-app -Cz--audio \
	$(CROSS_LIB_PATH)/sound/z88dk/psg/psg_sounds.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv a.wav $(BUILD_PATH)/FULL_mc1000_48k.wav
	rm a.bin
	rm a.cas		


mc1000_16k_full:
	$(Z88DK_PATH)$(MYZ88DK) +mc1000 $(ZSDCC_OPTS) -compiler=sdcc $(INCLUDE_OPTS) \
	-subtype=gaming -pragma-define:ansicolumns=32 \
	-DFULL_GAME  \
	-DLESS_TEXT \
	-DNO_BLINKING \
	-DNO_HINTS \
	-clib=ansi \
	-D__MC1000__ -DSOUNDS \
	-DEND_SCREEN \
	-DALT_SLEEP \
	-DCONIO -DNO_INIT_GRAPHICS \
	-vn  -lndos -create-app -Cz--audio \
	$(CROSS_LIB_PATH)/sound/z88dk/psg/psg_sounds.c \
	$(CROSS_LIB_PATH)/sleep/sleep_macros.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv a.wav $(BUILD_PATH)/FULL_mc1000_16k_less_text.wav
	rm a.bin
	rm a.cas

gal_22k:
	$(Z88DK_PATH)$(MYZ88DK) +gal $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-pragma-need=ansiterminal \
	-D__GAL__ -DFULL_GAME -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-vn -lndos -create-app -o  $(BUILD_PATH)/FULL_galaksija.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_galaksija.prg	
	

spectrum_16k:
	$(Z88DK_PATH)$(MYZ88DK) +zx $(SCCZ80_OPTS) $(INCLUDE_OPTS) -zorg=24055 \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	-pragma-redirect:getk=getk_inkey \
	-DZ88DK_JOYSTICK \
	-DTINY_GAME \
	-DFORCE_NARROW \
	-DANIMATE_PLAYER \
	-D__SPECTRUM__ \
	-lndos -create-app \
	-DCONIO \
	-DUDG_GRAPHICS \
	-pragma-redirect:fputc_cons=fputc_cons_generic \
	-o $(BUILD_PATH)/TINY_spectrum_16k.prg \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(TINY_FILES)
	rm $(BUILD_PATH)/TINY_spectrum_16k.prg
	rm $(BUILD_PATH)/TINY_spectrum_16k_BANK_7.bin		
	
spectrum_16k_light:
	$(Z88DK_PATH)$(MYZ88DK) +zx $(ZSDCC_OPTS) \
	-compiler=sdcc \
	$(INCLUDE_OPTS) \
	--max-allocs-per-node200000 -SO3 --opt-code-size \
	-zorg=24055 \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	-pragma-redirect:getk=getk_inkey \
	-DLESS_TEXT \
	-DFORCE_NARROW \
	-DFORCE_GHOSTS_NUMBER=8 \
	-DNO_SLEEP \
	-DNO_HINTS \
	-DNO_CONTROL_INSTRUCTIONS \
	-DNO_RANDOM_LEVEL \
	-DSIMPLE_STRATEGY \
	-DANIMATE_PLAYER \
	-D__SPECTRUM__ \
	-DALT_MOVE \
	-lndos -create-app \
	-DCONIO \
	-DUDG_GRAPHICS \
	-pragma-redirect:fputc_cons=fputc_cons_generic \
	-o $(BUILD_PATH)/LIGHT_spectrum_16k.prg \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(LIGHT_FILES)

	
spectrum_48k:
	$(Z88DK_PATH)$(MYZ88DK) +zx $(SCCZ80_OPTS) $(INCLUDE_OPTS)  \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	-pragma-redirect:getk=getk_inkey \
	-DFULL_GAME \
	-DZ88DK_JOYSTICK \
	-DANIMATE_PLAYER \
	-DSOUNDS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-D__SPECTRUM__ \
	-lndos -create-app \
	-DCONIO \
	-DUDG_GRAPHICS \
	-pragma-redirect:fputc_cons=fputc_cons_generic \
	-o $(BUILD_PATH)/FULL_spectrum_48k.prg \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_spectrum_48k.prg
	rm $(BUILD_PATH)/FULL_spectrum_48k_BANK_7.bin	

	
spectrum_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +zx $(SCCZ80_OPTS) $(INCLUDE_OPTS) -vn  \
	-DTINY_GAME \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	-pragma-redirect:getk=getk_inkey \
	-DBUFFERED \
	-DFORCE_XSIZE=29 \
	-DFORCE_YSIZE=19 \
	-DTURN_BASED \
	-DNO_INIT_GRAPHICS \
	-D__SPECTRUM__ \
	-lndos -create-app \
	-pragma-redirect:fputc_cons=fputc_cons_generic \
	-o $(BUILD_PATH)/TINY_spectrum_buffered.prg \
	$(TINY_FILES)	
	rm $(BUILD_PATH)/TINY_spectrum_buffered.prg
	rm $(BUILD_PATH)/TINY_spectrum_buffered_BANK_7.bin	


pc6001_16k:
	$(Z88DK_PATH)$(MYZ88DK) +pc6001 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -Cz--audio -clib=ansi \
	-D__PC6001__ \
	-DINITIAL_SLOWDOWN=31500 \
	-DALT_SLEEP \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/LIGHT_pc6001.prg  \
	$(CROSS_LIB_PATH)/sleep/sleep_macros.c \
	$(LIGHT_FILES)
	rm $(BUILD_PATH)/LIGHT_pc6001.prg
	rm $(BUILD_PATH)/LIGHT_pc6001.wav
	mv $(BUILD_PATH)/LIGHT_pc6001.cas $(BUILD_PATH)/LIGHT_pc6001.cp6	


pc6001_32k:
	$(Z88DK_PATH)$(MYZ88DK) +pc6001 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -Cz--audio -clib=ansi -subtype=32k \
	-D__PC6001__ \
	-DFULL_GAME \
	-DINITIAL_SLOWDOWN=31500 \
	-DALT_SLEEP \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/FULL_pc6001_32k.prg \
	$(CROSS_LIB_PATH)/sleep/sleep_macros.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_pc6001_32k.prg
	rm $(BUILD_PATH)/FULL_pc6001_32k.wav
	mv $(BUILD_PATH)/FULL_pc6001_32k.cas $(BUILD_PATH)/FULL_pc6001_32k.cp6
	
	
	
pc6001_32k_udg:
	$(Z88DK_PATH)$(MYZ88DK) +pc6001 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -Cz--audio -clib=ansi -subtype=32k \
	-D__PC6001__ -DFULL_GAME \
	-DINITIAL_SLOWDOWN=31500 \
	-DCONIO \
	-DANIMATE_PLAYER -DUDG_GRAPHICS \
	-DFORCE_SCREEN_MODE=2 \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	-lndos -create-app -o $(BUILD_PATH)/FULL_pc6001_32k_udg.prg \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_pc6001_32k_udg.prg
	rm $(BUILD_PATH)/FULL_pc6001_32k_udg.wav
	mv $(BUILD_PATH)/FULL_pc6001_32k_udg.cas $(BUILD_PATH)/FULL_pc6001_32k_udg.cp6
	

nascom_32k_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +nascom $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi -vn -lndos \
	-D__NASCOM__ \
	-DTURN_BASED \
	-DSOUNDS \
	-DFULL_GAME \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/FULL_nascom_32k_turn_based.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_nascom_32k_turn_based.prg
	


nascom_32k:
	$(Z88DK_PATH)$(MYZ88DK) +nascom $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi -vn -lndos \
	-D__NASCOM__ \
	-DSOUNDS \
	-DFULL_GAME \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/FULL_nascom_32k.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_nascom_32k.prg
	

nascom_16k:
	$(Z88DK_PATH)$(MYZ88DK) +nascom $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi -vn -lndos \
	-D__NASCOM__ \
	-DSOUNDS \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app -o $(BUILD_PATH)/LIGHT_nascom_16k.prg \
	$(LIGHT_FILES)
	rm $(BUILD_PATH)/LIGHT_nascom_16k.prg
	

z1013:
	$(Z88DK_PATH)$(MYZ88DK) +z1013 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi \
	-vn -lndos \
	-D__Z1013__  -DFULL_GAME -DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-create-app
	mv $(SOURCE_PATH)/../A.Z80 $(BUILD_PATH)/FULL_z1013.z80
	rm $(SOURCE_PATH)/../a.bin	


px8_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=px32k \
	$(INCLUDE_OPTS) \
	-D__PX8__ \
	-DCONIO_ADM3A \
	-DTINY_GAME -DLESS_TEXT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app \
	$(TINY_FILES)
	rm a.bin
	mv A.ROM $(BUILD_PATH)/TINY_px8.ROM

px8_broken:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=px8 \
	$(INCLUDE_OPTS) \
	-D__PX8__ \
	-DFULL_GAME \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DDEFAULT_CLEAR_SCREEN \
	-create-app \
	$(FULL_FILES)
	rm a.bin
	mv A.ROM $(BUILD_PATH)/FULL_px8_chars.ROM

	
px8_chars_ansi:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=px8ansi \
	$(INCLUDE_OPTS) \
	-D__PX8__ \
	-DFULL_GAME \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DDEFAULT_CLEAR_SCREEN \
	-create-app \
	$(FULL_FILES)
	rm a.bin
	mv A.ROM $(BUILD_PATH)/FULL_px8_chars.ROM	

	
px8_chars:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=px8 \
	$(INCLUDE_OPTS) \
	-D__PX8__ \
	-DCONIO_ADM3A_WITH_UNDEF \
	-DFULL_GAME \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DDEFAULT_CLEAR_SCREEN \
	-create-app \
	$(FULL_FILES)
	rm a.bin
	mv A.ROM $(BUILD_PATH)/FULL_px8_chars.ROM	

px8:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__PX8__ \
	-DFULL_GAME \
	-subtype=px8 \
	-create-app \
	-vn -lndos \
	-DALT_PRINT \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	rm a.bin
	mv A.ROM $(BUILD_PATH)/FULL_px8.ROM


px4_tiny_putc4x6:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -lpx4 \
	$(INCLUDE_OPTS) \
	-pragma-define:ansicolumns=40 \
	-pragma-define:ansipixels=240 -pragma-define:ansicolumns=60 \
 	-subtype=px4ansi \
	-D__PX4__ \
	-DTINY_GAME \
	-DNO_WAIT \
	-DZ88DK_PUTC4X6 \
	-DCONIO -DNO_INIT_GRAPHICS \
	-Cz–-32k \
	-create-app \
	-vn -lndos \
	$(TINY_FILES)
	rm a.bin
	mv A.ROM $(BUILD_PATH)/TINY_px4_putc4x6.ROM


px4_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -lpx4 \
	$(INCLUDE_OPTS) \
	-D__PX4__ \
	-DTINY_GAME \
	-subtype=px4ansi -Cz–-32k \
	-pragma-define:ansicolumns=40 \
	-create-app \
	-vn -lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(TINY_FILES)
	rm a.bin
	mv A.ROM $(BUILD_PATH)/TINY_px4.ROM


oz_tiny_buffered: 	
	$(Z88DK_PATH)$(MYZ88DK) +oz $(ZSDCC_OPTS) \
	$(INCLUDE_OPTS) \
	-compiler=sdcc \
	-SO3 \
	-D__OZ__ \
	-DTINY_GAME \
	-DFORCE_XSIZE=59 \
	-DFORCE_YSIZE=9 \
	-DFORCE_NARROW \
	-vn -lndos \
	-DBUFFERED -DTURN_BASED -DNO_INIT_GRAPHICS \
	-DLESS_TEXT \
	-DNO_COLOR \
	-DSIMPLE_STRATEGY \
	-DNO_SET_SCREEN_COLORS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	$(TINY_FILES) \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c	
	$(TOOLS_PATH)/z88dk/oz/makewzd.exe a
	rm a.bin
	mv a.wzd $(BUILD_PATH)/TINY_oz_buffered.wzd
	
	
oz_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +oz $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__OZ__ \
	-DTINY_GAME \
	-vn -lndos \
	-DFORCE_XSIZE=59 \
	-DFORCE_YSIZE=9 \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-DNO_COLOR \
	-DNO_RANDOM_LEVEL \
	-DSIMPLE_STRATEGY \
	-DALT_MOVE \
	-DNO_CONTROL_INSTRUCTIONS \
	-DNO_SET_SCREEN_COLORS \
	-DNO_WAIT \
	-DNO_SLEEP \
	-DDEFAULT_CLEAR_SCREEN \
	-DALT_PRINT \
	$(TINY_FILES) \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c
	$(TOOLS_PATH)/z88dk/oz/makewzd.exe a
	rm a.bin
	mv a.wzd $(BUILD_PATH)/TINY_oz.wzd
	
	
# it fails with sdcc
z88_tiny_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +z88 $(SCCZ80_OPTS) -subtype=app \
	$(INCLUDE_OPTS) \
	-D__Z88__ \
	-DTINY_GAME \
	-DFORCE_XSIZE=79 \
	-DFORCE_YSIZE=6 \
	-DFORCE_NARROW \
	-vn -lndos \
	-DBUFFERED -DTURN_BASED \
	-DLESS_TEXT \
	-DNO_COLOR \
	-DSIMPLE_STRATEGY \
	-DNO_SET_SCREEN_COLORS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/z88/z88_init_graphics.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(TINY_FILES) \
	-create-app
	rm a.bin
	rm a_BSS.bin
	rm a_DATA.bin
	rm a_bss_fardata.bin
	mv a.63 $(BUILD_PATH)/TINY_z88_buffered.63
	mv a.epr $(BUILD_PATH)/TINY_z88_buffered.epr
		
	
z88_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +z88 $(SCCZ80_OPTS) -subtype=app \
	$(INCLUDE_OPTS) \
	-D__Z88__ \
	-DTINY_GAME \
	-vn -lndos \
	-DALT_PRINT \
	-DZ88DK_SPRITES \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-DNO_WAIT \
	-DNO_SLEEP \
	-DNO_COLOR \
	-DFORCE_BOMBS_NUMBER=2 \
	-DFORCE_GHOSTS_NUMBER=6 \
	-DDEFAULT_CLEAR_SCREEN \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/z88/z88_init_graphics.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(TINY_FILES) \
	-create-app
	rm a.bin
	rm a_BSS.bin
	rm a_DATA.bin
	mv a.63 $(BUILD_PATH)/TINY_z88.63
	mv a.epr $(BUILD_PATH)/TINY_z88.epr
	

z88:
	$(Z88DK_PATH)$(MYZ88DK) +z88 $(SCCZ80_OPTS) -subtype=app \
	$(INCLUDE_OPTS) \
	-D__Z88__ \
	-DFULL_GAME \
	-vn -lndos \
	-DALT_PRINT \
	-DZ88DK_SPRITES \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-DNO_WAIT \
	-DNO_SLEEP \
	-DNO_COLOR \
	-DDEFAULT_CLEAR_SCREEN \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/z88/z88_init_graphics.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES) \
	-create-app
	rm a.bin
	rm a_BSS.bin
	rm a_DATA.bin
	rm a_bss_fardata.bin
	mv a.63 $(BUILD_PATH)/FULL_z88.63
	mv a.epr $(BUILD_PATH)/FULL_z88.epr
	

	
px4:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -lpx4 \
	$(INCLUDE_OPTS) \
	-D__PX4__ \
	-DFULL_GAME \
	-subtype=px4 -Cz--32k \
	-create-app \
	-vn -lndos \
	-DALT_PRINT \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	$(SOURCE_PATH)/end_screen.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	rm a.bin
	mv A.ROM $(BUILD_PATH)/FULL_px4.ROM		

	
px4_chars:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -lpx4 \
	$(INCLUDE_OPTS) \
	-D__PX4__ \
	-DFULL_GAME \
	-subtype=px4ansi -Cz–-32k \
	-pragma-define:ansicolumns=40 \
	-create-app \
	-vn -lndos \
	-DNO_PRINT \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(FULL_FILES)
	rm a.bin
	mv A.ROM $(BUILD_PATH)/FULL_px4.ROM	

px4_putc4x6:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -lpx4 \
	$(INCLUDE_OPTS) \
	-pragma-define:ansicolumns=40 \
	-pragma-define:ansipixels=240 -pragma-define:ansicolumns=60 \
 	-subtype=px4ansi \
	-D__PX4__ \
	-DFULL_GAME \
	-DNO_WAIT \
	-DBETWEEN_LEVEL -DEND_SCREEN \
	-DZ88DK_PUTC4X6 \
	-DNO_PRINT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-Cz–-32k \
	-create-app \
	-vn -lndos \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm a.bin
	mv A.ROM $(BUILD_PATH)/FULL_px4_putc4x6.ROM


x1_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +x1 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__X1__ \
	-DTINY_GAME -DNO_SLEEP \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app -o $(BUILD_PATH)/TINY_x1.bin -vn -lndos \
	$(TINY_FILES)
	rm $(BUILD_PATH)/TINY_x1.bin
	
	
x1:
	$(Z88DK_PATH)$(MYZ88DK) +x1 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__X1__ \
	-DFULL_GAME \
	-DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app -o $(BUILD_PATH)/FULL_x1.bin -vn -lndos \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_x1.bin

trs80_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +trs80 $(SCCZ80_OPTS) -lndos \
	$(INCLUDE_OPTS) \
	-pragma-redirect:getk=getk_inkey \
	-lm -create-app \
	-D__TRS80__ \
	-DCONIO_VT52 \
	-DTINY_GAME -DLESS_TEXT -DNO_SLEEP \
	-DCONIO -DNO_INIT_GRAPHICS \
	-o$(BUILD_PATH)/TINY_trs80.bin \
	$(TINY_FILES)
	rm $(BUILD_PATH)/TINY_trs80.bin
	

trs80_chars:
	$(Z88DK_PATH)$(MYZ88DK) +trs80 $(SCCZ80_OPTS) -lndos \
	$(INCLUDE_OPTS) \
	-pragma-redirect:getk=getk_inkey \
	-pragma-define:REGISTER_SP=0xffb5 \
	-lm -create-app \
	-D__TRS80__ \
	-DFULL_GAME -DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO_VT52 \
	-DCONIO -DNO_INIT_GRAPHICS \
	-o$(BUILD_PATH)/FULL_trs80_chars.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_trs80_chars.bin	


trs80:	
	$(Z88DK_PATH)$(MYZ88DK) +trs80 $(SCCZ80_OPTS) -lndos \
	$(INCLUDE_OPTS) $(ULTRA_DRAW_SKIP) \
	-pragma-redirect:getk=getk_inkey \
	-pragma-define:REGISTER_SP=0xffb5 \
	-D__TRS80__ \
	-DFULL_GAME \
	-vn -lndos \
	-DALT_PRINT \
	-DFORCE_NARROW \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-create-app \
	-DBETWEEN_LEVEL \
	-o$(BUILD_PATH)/FULL_trs80.bin \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_trs80.bin	
	
	
trs80_wav:
	$(Z88DK_PATH)$(MYZ88DK) +trs80 $(SCCZ80_OPTS) -lndos -subtype=wav \
	$(INCLUDE_OPTS) \
	-pragma-redirect:getk=getk_inkey \
	-pragma-define:REGISTER_SP=0xffb5 \
	-lm -create-app \
	-D__TRS80__ \
	-DFULL_GAME -DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO_VT52 \
	-DCONIO -DNO_INIT_GRAPHICS \
	-o$(BUILD_PATH)/FULL_trs80.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_trs80.bin	
	
trs80_cmd:
	$(Z88DK_PATH)$(MYZ88DK) +trs80 $(SCCZ80_OPTS) -lndos -subtype=disk \
	$(INCLUDE_OPTS) \
	-lm -create-app \
	-D__TRS80__ \
	-pragma-redirect:getk=getk_inkey \
	-DFULL_GAME -DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO_VT52 \
	-DCONIO -DNO_INIT_GRAPHICS \
	-o$(BUILD_PATH)/FULL_trs80.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_trs80.bin	
	
eg2k:
	$(Z88DK_PATH)$(MYZ88DK) +trs80 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__EG2K__ \
	-subtype=eg2000disk \
	-lndos \
	-lm \
	-D__TRS80__ \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DFULL_GAME -DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO_VT52 \
	-create-app \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv a.cmd $(BUILD_PATH)/FULL_eg2k.cmd
	rm a.bin



eg2k_udg:
	$(Z88DK_PATH)$(MYZ88DK) +trs80 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__EG2K__ \
	-subtype=eg2000disk \
	-pragma-redirect:getk=getk_inkey \
	$(INCLUDE_OPTS) \
	-D__EG2K__ \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-DLESS_TEXT \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	chase/end_screen.c \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_eg2k_udg.bin
	rm $(BUILD_PATH)/FULL_eg2k_udg.bin	


tiki100_sprites_light:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -ltiki100 \
	$(INCLUDE_OPTS) \
	-D__TIKI100__ \
	-DNO_PRINT \
	-DZ88DK_SPRITES \
	-DLESS_TEXT \
	-DNO_SLEEP \
	-DNO_WAIT \
	-DANIMATE_PLAYER \
	-create-app -o$(BUILD_PATH)/LIGHT_tiki100_sprites.bin \
	-DNO_INIT_GRAPHICS \
	$(LIGHT_FILES)
	rm $(BUILD_PATH)/LIGHT_tiki100_sprites.bin	

	

tiki100: 
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=tiki100 -ltiki100 \
	$(INCLUDE_OPTS) \
	-D__TIKI100__ \
	-DNO_PRINT \
	-DFULL_GAME \
	-DNO_COLOR \
	-DALT_MOVE \
	-DNO_RANDOM_LEVEL \
	-DNO_SLEEP \
	-DZ88DK_SPRITES \
	-DLESS_TEXT \
	-DNO_HINTS \
	-DNO_SET_SCREEN_COLORS \
	-DANIMATE_PLAYER \
	-create-app \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) 
	mv a.dsk $(BUILD_PATH)/FULL_tiki100.dsk
	rm a.bin
	rm a_HIMEM.bin
	
kaypro: 
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -lgfxkp \
	$(INCLUDE_OPTS) $(ULTRA_DRAW_SKIP) \
	-D__KAYPRO__ \
	-DNO_PRINT \
	-DFULL_GAME \
	-DZ88DK_SPRITES \
	-DLESS_TEXT \
	-DANIMATE_PLAYER \
	-create-app -o$(BUILD_PATH)/FULL_kaypro.bin \
	-DNO_INIT_GRAPHICS \
	-DINITIAL_GHOST_FREEZE \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_kaypro.bin

alphatro:
	$(Z88DK_PATH)$(MYZ88DK) +alphatro $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__ALPHATRO__ \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO_VT52 \
	-DCONIO \
	-DNO_INIT_GRAPHICS \
	-lndos \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	chase/end_screen.c \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_alphatro.bin
	rm $(BUILD_PATH)/FULL_alphatro.bin
	rm $(BUILD_PATH)/FULL_alphatro_DATA.bin
	rm $(BUILD_PATH)/FULL_alphatro_BSS.bin	


microbee_sprites:
	$(Z88DK_PATH)$(MYZ88DK) +bee $(SCCZ80_OPTS) -lgfxnc100 \
	$(INCLUDE_OPTS) \
	-D__NC100__ \
	-DALT_PRINT \
	-DFULL_GAME \
	-DZ88DK_SPRITES \
	-DLESS_TEXT \
	-DANIMATE_PLAYER \
	-create-app -o$(BUILD_PATH)/FULL_microbee_sprites.bin \
	-DNO_INIT_GRAPHICS \
	-DINITIAL_GHOST_FREEZE \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_microbee_sprites.bin
	
nc100:
	$(Z88DK_PATH)$(MYZ88DK) +nc $(SCCZ80_OPTS) -lgfxnc100 \
	$(INCLUDE_OPTS) \
	-D__NC100__ \
	-DALT_PRINT \
	-DFULL_GAME \
	-DZ88DK_SPRITES \
	-DLESS_TEXT \
	-DANIMATE_PLAYER \
	-create-app -o$(BUILD_PATH)/FULL_nc100_alt_print.bin \
	-DNO_INIT_GRAPHICS \
	-DINITIAL_GHOST_FREEZE \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_nc100_alt_print.bin

nc200:
	$(Z88DK_PATH)$(MYZ88DK) +nc $(SCCZ80_OPTS) -lgfxnc200 \
	$(INCLUDE_OPTS) \
	-D__NC200__ \
	-DALT_PRINT \
	-DFULL_GAME \
	-DZ88DK_SPRITES \
	-DLESS_TEXT \
	-DANIMATE_PLAYER \
	-create-app -o$(BUILD_PATH)/FULL_nc200_alt_print.bin \
	-DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_nc200_alt_print.bin
	

attache_chars:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=attache \
	$(INCLUDE_OPTS) \
	-DCONIO_ADM3A \
	-D__CPM_80X24__ \
	-DFULL_GAME -DLESS_TEXT -DNO_SLEEP -DNO_WAIT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/FULL_attache_chars.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_attache_chars.bin

attache:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=attache \
	$(INCLUDE_OPTS) $(ULTRA_DRAW_SKIP) \
	-D__ATTACHE__ \
	-DFULL_GAME \
	-DALT_PRINT \
	-DFULL_GAME \
	-DZ88DK_SPRITES \
	-DLESS_TEXT \
	-DANIMATE_PLAYER \
	-DFORCE_GHOSTS_NUMBER=8 \
	-create-app -o$(BUILD_PATH)/FULL_attache.bin \
	-DNO_INIT_GRAPHICS \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)	
	rm $(BUILD_PATH)/FULL_attache.bin


aussie:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -laussie  \
	$(INCLUDE_OPTS) \
	-D__AUSSIE__ \
	-DCONIO_ADM3A \
	-D__CPM_80X24__ \
	-DFULL_GAME -DLESS_TEXT -DNO_SLEEP -DNO_WAIT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/FULL_aussie.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_aussie.bin

	
osborne1_chars:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -lgfxosborne1 -subtype=osborne1 \
	$(INCLUDE_OPTS) \
	-D__OSBORNE1__ \
	-DNO_COLOR \
	-DFORCE_CONIO_LIB \
	-DCONIO_ADM3A_WITH_UNDEF \
	-D__CPM_80X24__ \
	-DFULL_GAME -DLESS_TEXT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/FULL_osborne1_chars.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_osborne1_chars.bin

osborne1:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -lgfxosborne1 -subtype=osborne1 \
	$(INCLUDE_OPTS) \
	-D__OSBORNE1__ \
	-DNO_COLOR \
	-DFORCE_CONIO_LIB \
	-DFULL_GAME -DLESS_TEXT \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DALT_PRINT \
	-create-app -o$(BUILD_PATH)/FULL_osborne1.bin \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c
	rm $(BUILD_PATH)/FULL_osborne1.bin	
	
	
excalibur64:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=excali64 \
	$(INCLUDE_OPTS) \
	-D__CPM_80X24__ \
	-DFORCE_CONIO_LIB \
	-D__EXCALI64__ \
	-DFULL_GAME -DLESS_TEXT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/FULL_excalibur64.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_excalibur64.bin	
	rm $(BUILD_PATH)/FULL_excalibur64_HIMEM.bin
	
bic:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=bic \
	$(INCLUDE_OPTS) \
	-D__CPM_80X24__ \
	-DCONIO_ADM3A_WITH_UNDEF \
	-DFORCE_CONIO_LIB \
	-D__BIC__ \
	-DFULL_GAME -DLESS_TEXT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/FULL_bic.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_bic.bin		
	
qc10:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=qc10 \
	$(INCLUDE_OPTS) \
	-D__CPM_80X24__ \
	-DCONIO_ADM3A_WITH_UNDEF \
	-DFORCE_CONIO_LIB \
	-D__QC10__ \
	-DFULL_GAME -DLESS_TEXT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/FULL_qc10.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_qc10.bin	
	
dmv:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=dmv \
	$(INCLUDE_OPTS) \
	-D__CPM_80X24__ \
	-DCONIO_ADM3A_WITH_UNDEF \
	-DFORCE_CONIO_LIB \
	-D__DMV__ \
	-DFULL_GAME -DLESS_TEXT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/FULL_dmv.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_dmv.bin	


sv8000:
	$(Z88DK_PATH)$(MYZ88DK) +sv8000 $(SCCZ80_OPTS) -subtype=32k \
	$(INCLUDE_OPTS) \
	-DFORCE_CONIO_LIB \
    -DZ88DK_JOYSTICK \
	-D__SV8000__ \
	-DFULL_GAME -DLESS_TEXT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/FULL_sv8000.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_sv8000.bin	
    
cpm_adm3a:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DCONIO_ADM3A \
	-D__CPM_80X24__ \
	-DFULL_GAME -DLESS_TEXT -DNO_SLEEP -DNO_WAIT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/FULL_cpm_adm3a.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_cpm_adm3a.bin

	
sos_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +sos $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-lndos \
	-DSTDLIB \
	-DNO_COLOR \
	-DBUFFERED -DALT_PRINT \
	-DTURN_BASED \
	-DFULL_GAME -DLESS_TEXT -DNO_SLEEP -DNO_WAIT \
	-DNO_INIT_GRAPHICS \
	-DDEFAULT_CLEAR_SCREEN \
	-create-app \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	rm a.bin
	mv a.obj $(BUILD_PATH)/FULL_sos_buffered.obj
	
sos_tiny_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +sos $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-lndos \
	-DSTDLIB \
	-DNO_COLOR \
	-DBUFFERED -DALT_PRINT \
	-DTURN_BASED \
	-DTINY_GAME -DLESS_TEXT -DNO_SLEEP -DNO_WAIT \
	-DNO_INIT_GRAPHICS \
	-DDEFAULT_CLEAR_SCREEN \
	-create-app \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(TINY_FILES)
	rm a.bin
	mv a.obj $(BUILD_PATH)/TINY_sos_buffered.obj

	
c7420:
	$(Z88DK_PATH)$(MYZ88DK) +c7420 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-lndos \
	-DSTDLIB \
	-DNO_COLOR \
	-DBUFFERED -DALT_PRINT \
	-DFULL_GAME -DLESS_TEXT -DNO_SLEEP -DNO_WAIT \
	-DNO_INIT_GRAPHICS \
	-create-app \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	rm a.bin
	mv _a.bas $(BUILD_PATH)/FULL_c7420.bas	


c7420_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +c7420 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-lndos \
	-DSTDLIB \
	-DNO_COLOR \
	-DBUFFERED -DALT_PRINT \
	-DTINY_GAME -DLESS_TEXT -DNO_SLEEP -DNO_WAIT \
	-DNO_INIT_GRAPHICS \
	-create-app \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(TINY_FILES)
	rm a.bin
	mv _a.bas $(BUILD_PATH)/TINY_c7420.bas	
	
	
	
cpm_vt52:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DCONIO_VT52 \
	-D__CPM_80X24__ \
	-DFULL_GAME -DLESS_TEXT -DNO_SLEEP -DNO_WAIT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/FULL_cpm_vt52.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_cpm_vt52.bin	
	

cpm_vt100:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DCONIO_VT100 \
	-D__CPM_80X24__ \
	-DFULL_GAME -DLESS_TEXT -DNO_SLEEP -DNO_WAIT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/FULL_cpm_vt100.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_cpm_vt100.bin	
	
	

c128_z80_80col:
	$(Z88DK_PATH)$(MYZ88DK) +c128 $(SCCZ80_OPTS) -lgfx128hr \
	$(INCLUDE_OPTS) $(ULTRA_DRAW_SKIP) \
	-lndos -subtype=disk \
	-D__C128_Z80__ \
	-DZ88DK_SPRITES -DANIMATE_PLAYER \
	-DFULL_GAME -DEND_SCREEN \
	-DLESS_TEXT \
	-DSOUNDS \
	-DNO_BLINKING \
	-DFORCE_BIT_BANG \
	-DZ88DK_JOYSTICK \
	-DSIMPLE_STRATEGY \
	-DFORCE_GHOSTS_NUMBER=8 \
	-DALT_PRINT \
	-DNO_COLOR \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/c128/c128_init_graphics.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-create-app
	$(TOOLS_PATH)/generic/c1541 -format "crosschase,0" d64 FULL_c128_z80_80col.d64
	$(TOOLS_PATH)/generic/c1541 -attach FULL_c128_z80_80col.d64 -write a.ldr
	$(TOOLS_PATH)/generic/c1541 -attach FULL_c128_z80_80col.d64 -write a
	mv FULL_c128_z80_80col.d64 $(BUILD_PATH)/
	rm A.LDR
	rm A
	rm a.bin

c128_z80_40col:
	$(Z88DK_PATH)$(MYZ88DK) +c128 $(ZSDCC_OPTS) \
	-compiler=sdcc \
	$(INCLUDE_OPTS) \
	-lndos -subtype=disk \
	-D__C128_Z80__ -DFORCE_XSIZE=40 \
	-DFULL_GAME -DEND_SCREEN -DNO_BLINKING \
	-DFORCE_CONIO_LIB \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-create-app
	$(TOOLS_PATH)/generic/c1541 -format "crosschase,0" d64 FULL_c128_z80_40col.d64
	$(TOOLS_PATH)/generic/c1541 -attach FULL_c128_z80_40col.d64 -write a.ldr
	$(TOOLS_PATH)/generic/c1541 -attach FULL_c128_z80_40col.d64 -write a
	mv FULL_c128_z80_40col.d64 $(BUILD_PATH)/
	rm A.LDR
	rm A
	rm a.bin


c128_z80_40col_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +c128 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-lndos -subtype=disk \
	-D__C128_Z80__ -DFORCE_XSIZE=40 \
	-DFULL_GAME -DEND_SCREEN \
	-DTURN_BASED \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-create-app
	$(TOOLS_PATH)/generic/c1541 -format "crosschase,0" d64 FULL_c128_z80_40col_turn_based.d64
	$(TOOLS_PATH)/generic/c1541 -attach FULL_c128_z80_40col_turn_based.d64 -write a.ldr
	$(TOOLS_PATH)/generic/c1541 -attach FULL_c128_z80_40col_turn_based.d64 -write a
	mv FULL_c128_z80_40col_turn_based.d64 $(BUILD_PATH)/
	rm A.LDR
	rm A
	rm a.bin
	
	
einstein:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(ZSDCC_OPTS) -subtype=einstein -leinstein \
	-pragma-define:ansicolumns=32 \
	-compiler=sdcc \
	$(INCLUDE_OPTS) \
	-D__EINSTEIN__ \
	-DFORCE_CONIO_LIB \
	-DFULL_GAME -DLESS_TEXT \
	-clib=ansi \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app -o$(BUILD_PATH)/FULL_einstein.bin \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_einstein.bin


ti82_chars:
	$(Z88DK_PATH)$(MYZ88DK) +ti82 $(SCCZ80_OPTS) \
	-DZ88DK_JOYSTICK \
	$(INCLUDE_OPTS) -D__TI82__ \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-vn \
	-DFULL_GAME  \
	-DLESS_TEXT -DSIMPLE_STRATEGY -DNO_HINTS -DNO_BLINKING \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	-create-app  \
	$(FULL_FILES)
	mv $(SOURCE_PATH)/../a.82p $(BUILD_PATH)/FULL_ti82_chars.82p
	rm $(SOURCE_PATH)/../a.bin

ti82:
	$(Z88DK_PATH)$(MYZ88DK) +ti82 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__TI82__ \
	-DZ88DK_JOYSTICK \
	-DFULL_GAME \
	-vn -lndos \
	-DALT_PRINT \
	-DFORCE_NARROW \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-create-app \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	mv $(SOURCE_PATH)/../a.82p $(BUILD_PATH)/FULL_ti82.82p
	rm $(SOURCE_PATH)/../a.bin


ti83_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +ti83 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) -D__TI83__ \
	-DZ88DK_JOYSTICK \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-vn \
	-DFULL_GAME  \
	-DTURN_BASED \
	-DNO_WAIT \
	-DLESS_TEXT -DNO_HINTS -DNO_BLINKING -DNO_COLOR \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app
	mv $(SOURCE_PATH)/../a.83p $(BUILD_PATH)/FULL_ti83_turn_based.83p
	rm $(SOURCE_PATH)/../a.bin

	
ti83_tiny_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +ti83 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) -D__TI83__ \
	-DZ88DK_JOYSTICK \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-vn \
	-DTURN_BASED \
	-DNO_WAIT \
	-DTINY_GAME  \
	-DLESS_TEXT -DNO_HINTS -DNO_BLINKING -DNO_COLOR \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app \
	$(TINY_FILES)
	mv $(SOURCE_PATH)/../a.83p $(BUILD_PATH)/TINY_ti83_turn_based.83p	
	rm $(SOURCE_PATH)/../a.bin

ti83_chars:
	$(Z88DK_PATH)$(MYZ88DK) +ti83 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) -D__TI83__ \
	-DZ88DK_JOYSTICK \
	-DFORCE_XSIZE=32 \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-vn \
	-DFULL_GAME  \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app -oxchase \
	$(FULL_FILES)
	mv $(SOURCE_PATH)/../xchase.83p $(BUILD_PATH)/FULL_ti83_chars.83p	
	rm $(SOURCE_PATH)/../xchase
	
	
ti83:
	$(Z88DK_PATH)$(MYZ88DK) +ti83 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__TI83__ \
	-DZ88DK_JOYSTICK \
	-DFULL_GAME \
	-vn -lndos \
	-DALT_PRINT \
	-DFORCE_NARROW \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-create-app -oxchase \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	mv $(SOURCE_PATH)/../xchase.83p $(BUILD_PATH)/FULL_ti83.83p
	rm $(SOURCE_PATH)/../xchase	
	
ti8x:
	$(Z88DK_PATH)$(MYZ88DK) +ti8x $(SCCZ80_OPTS) -clib=ansi  -subtype=ion -Cz--altfmt \
	$(INCLUDE_OPTS) \
	-D__TI8X__ \
	-DZ88DK_JOYSTICK \
	-DFULL_GAME \
	-vn -lndos \
	-DALT_PRINT \
	-DFORCE_NARROW \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-create-app -oxchase \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	mv $(SOURCE_PATH)/../xchase.8xp $(BUILD_PATH)/FULL_ti8x.8xp	
	mv $(SOURCE_PATH)/../xchase $(BUILD_PATH)/FULL_ti8x.bin


ti86:
	$(Z88DK_PATH)$(MYZ88DK) +ti86 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__TI86__ \
	-DFULL_GAME \
	-DZ88DK_JOYSTICK \
	-DLESS_TEXT	\
	-DNO_COLOR \
	-DNO_BLINKING \
	-DNO_HINTS \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-vn \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app  \
	$(FULL_FILES)
	mv $(SOURCE_PATH)/../a.86p $(BUILD_PATH)/FULL_ti86.86p	
	rm $(SOURCE_PATH)/../a.bin	
	
ti86_light:
	$(Z88DK_PATH)$(MYZ88DK) +ti86 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__TI86__ \
	-DZ88DK_JOYSTICK \
	-DLESS_TEXT	\
	-DNO_COLOR \
	-DNO_BLINKING \
	-DNO_HINTS \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-vn \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app  \
	$(LIGHT_FILES)
	mv $(SOURCE_PATH)/../a.86p $(BUILD_PATH)/LIGHT_ti86.86p	
	rm $(SOURCE_PATH)/../a.bin	

	
ti85_chars:
	$(Z88DK_PATH)$(MYZ88DK) +ti85 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) -D__TI85__ \
	-DZ88DK_JOYSTICK \
	-DFORCE_XSIZE=32 \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-vn \
	-DFULL_GAME  \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app  \
	$(FULL_FILES)
	mv $(SOURCE_PATH)/../a.85s $(BUILD_PATH)/FULL_ti85_chars.85s	
	rm $(SOURCE_PATH)/../a.bin

ti85:
	$(Z88DK_PATH)$(MYZ88DK) +ti85 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__TI85__ \
	-DZ88DK_JOYSTICK \
	-DFULL_GAME \
	-vn -lndos \
	-DALT_PRINT \
	-DFORCE_NARROW \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-create-app \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	mv $(SOURCE_PATH)/../a.85s $(BUILD_PATH)/FULL_ti85.85s
	rm $(SOURCE_PATH)/../a.bin		
	
ti85_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +ti85 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__TI85__ \
	-DZ88DK_JOYSTICK \
	-DFULL_GAME \
	-DTURN_BASED \
	-vn -lndos \
	-DALT_PRINT \
	-DFORCE_NARROW \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-create-app \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	mv $(SOURCE_PATH)/../a.85s $(BUILD_PATH)/FULL_ti85_turn_based.85s
	rm $(SOURCE_PATH)/../a.bin

		
m5_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +m5 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-lm -create-app -Cz--audio -subtype=tape \
	-D__M5__ \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-DTINY_GAME -DLESS_TEXT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-o$(BUILD_PATH)/TINY_m5.bin \
	$(TINY_FILES)
	rm $(BUILD_PATH)/TINY_m5.bin
	rm $(BUILD_PATH)/TINY_m5.cas


m5_udg:
	$(Z88DK_PATH)$(MYZ88DK) +m5 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-lm -create-app -Cz--audio -subtype=tape \
	-pragma-define:REGISTER_SP=65000 \
	-D__M5__ \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-DFULL_GAME -DLESS_TEXT \
	-DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO \
	-DSOUNDS \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-o$(BUILD_PATH)/FULL_m5_udg.bin	
	rm $(BUILD_PATH)/FULL_m5_udg.bin
	rm $(BUILD_PATH)/FULL_m5_udg.cas
		
m5:
	$(Z88DK_PATH)$(MYZ88DK) +m5 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-lm -create-app -Cz--audio -subtype=tape \
	-pragma-define:REGISTER_SP=65000 \
	-D__M5__ \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-DFULL_GAME -DLESS_TEXT -DNO_SLEEP -DNO_WAIT \
	-DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO -DNO_INIT_GRAPHICS \
	-o$(BUILD_PATH)/FULL_m5.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_m5.bin
	rm $(BUILD_PATH)/FULL_m5.cas
	

srr_udg:
	$(Z88DK_PATH)$(MYZ88DK) +srr $(SCCZ80_OPTS) $(INCLUDE_OPTS) -pragma-redirect:fputc_cons=fputc_cons_generic \
	-D__SRR__ -vn \
	-DFULL_GAME -DSOUNDS \
	-DEND_SCREEN -DBETWEEN_LEVEL -DNO_WAIT \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	-create-app \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm a.srr
	mv a.wav $(BUILD_PATH)/FULL_srr_udg.wav

	
srr:
	$(Z88DK_PATH)$(MYZ88DK) +srr $(SCCZ80_OPTS) $(INCLUDE_OPTS) -pragma-redirect:fputc_cons=fputc_cons_generic \
	-D__SRR__ -vn \
	-DFULL_GAME -DSOUNDS \
	-DEND_SCREEN -DBETWEEN_LEVEL -DNO_WAIT \
	-DCONIO_VT52 \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	-create-app \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm a.srr
	mv a.wav $(BUILD_PATH)/FULL_srr.wav


pv2000:
	$(Z88DK_PATH)$(MYZ88DK) +pv2000 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -pragma-redirect:fputc_cons=fputc_cons_generic \
	-D__SRR__ -vn \
	-DFULL_GAME -DSOUNDS \
	-DEND_SCREEN -DBETWEEN_LEVEL -DNO_WAIT \
	-DCONIO_VT52 \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	-create-app \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv a.rom $(BUILD_PATH)/FULL_pv2000.rom
	rm a.bin
	rm a_BSS.bin
	rm a_DATA.bin	
	
fp1100:
	$(Z88DK_PATH)$(MYZ88DK) +fp1100 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -pragma-redirect:fputc_cons=fputc_cons_generic \
	-D__FP1100__ -vn \
	-DCONIO_VT52 \
	-DFULL_GAME -DSOUNDS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-create-app
	mv a.d88 $(BUILD_PATH)/FULL_fp1100.d88
	rm a.bin
	rm a_BOOTSTRAP.bin
	

fp1100_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +fp1100 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-pragma-redirect:fputc_cons=fputc_cons_generic \
	-D__FP1100__ -vn \
	-DCONIO_VT52 \
	-DTINY_GAME -DSOUNDS \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(TINY_FILES) \
	-create-app
	mv a.d88 $(BUILD_PATH)/TINY_fp1100.d88
	rm a.bin
	rm a_BOOTSTRAP.bin

camputers_lynx:
	$(Z88DK_PATH)$(MYZ88DK) +lynx $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-pragma-redirect:fputc_cons=fputc_cons_generic \
	-pragma-redirect:getk=getk_inkey \
	-D__CAMPUTERS_LYNX__ \
	-vn \
	-DCONIO_VT52 \
	-DFULL_GAME -DSOUNDS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-create-app -o $(BUILD_PATH)/FULL_camputers_lynx.bin
	rm $(BUILD_PATH)/FULL_camputers_lynx.bin
	
camputers_lynx_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +lynx $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-pragma-redirect:fputc_cons=fputc_cons_generic \
	-pragma-redirect:getk=getk_inkey \
	-D__CAMPUTERS_LYNX__ \
	-vn \
	-DCONIO_VT52 \
	-DNO_COLOR \
	-DTINY_GAME \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(TINY_FILES) \
	-create-app -o $(BUILD_PATH)/TINY_camputers_lynx.bin
	rm $(BUILD_PATH)/TINY_camputers_lynx.bin	

newbrain_newline:
	$(Z88DK_PATH)$(MYZ88DK) +newbrain $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-lndos \
	$(SOURCE_PATH)/../experiments/newline_test.c \
	-create-app
	tar czvf newline_test.tar.zip _dir.txt a.bas a.dat
	mv newline_test.tar.zip $(BUILD_PATH)
	rm _dir.txt
	rm a.bas
	rm a.dat
	rm a.bin	
	
newbrain_hello:
	$(Z88DK_PATH)$(MYZ88DK) +newbrain $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-lndos \
	$(SOURCE_PATH)/../experiments/hello.c \
	-create-app
	tar czvf xchase.tar.zip _dir.txt a.bas a.dat
	rm _dir.txt
	rm a.bas
	rm a.dat
	rm a.bin
	
c7420_hello:
	$(Z88DK_PATH)$(MYZ88DK) +c7420 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-lndos \
	$(SOURCE_PATH)/../experiments/hello.c \
	-create-app	
	
oz_hello:
	$(Z88DK_PATH)$(MYZ88DK) +oz $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	$(SOURCE_PATH)/../experiments/hello.c 
	$(TOOLS_PATH)/z88dk/oz/makewzd.exe a
	rm a.bin
	mv a.wzd $(BUILD_PATH)/oz_hello.wzd
	

z88_hello:
	$(Z88DK_PATH)$(MYZ88DK) +z88 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -D__Z88__ -create-app -subtype=app \
	$(SOURCE_PATH)/../experiments/hello.c
	rm a.bin
	rm a_BSS.bin
	rm a_DATA.bin
	mv a.63 $(BUILD_PATH)/
	mv a.epr $(BUILD_PATH)/
	
x07_hello:
	$(Z88DK_PATH)$(MYZ88DK) +x07 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-Cz--audio \
	$(SOURCE_PATH)/../experiments/hello.c \
	-create-app 

cpm_hello:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	$(SOURCE_PATH)/../experiments/hello.c \
	-create-app
	rm a.bin
	mv A.COM $(BUILD_PATH)/CPMHELLO.COM
	
	
x07_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +x07 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-Cz--audio \
	-DFORCE_BOMBS_NUMBER=2 \
	-DFORCE_GHOSTS_NUMBER=6 \
	-DLESS_TEXT \
	-DNO_BLINKING \
	-DNO_CONTROL_INSTRUCTIONS \
	-DNO_RANDOM_LEVEL \
	-DNO_SET_SCREEN_COLORS \
	-D__X07__ \
	-vn \
	-DCONIO_VT52 \
	-DNO_COLOR \
	-DTINY_GAME \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(TINY_FILES) \
	-create-app -o $(BUILD_PATH)/TINY_x07.bin
	rm $(BUILD_PATH)/TINY_x07.bin	
	
	
rex:
	$(Z88DK_PATH)$(MYZ88DK) +rex $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__REX__ \
	-DTURN_BASED \
	-vn \
	-DREX \
	-DSTDLIB \
	-DNO_COLOR \
	-DFULL_GAME -DSOUNDS \
	-lndos \
	-DNO_PRINT \
	-DNO_WAIT \
	-DNO_SLEEP \
	-DNO_INPUT \
	-DNO_INIT_GRAPHICS \
	-DDEFAULT_CLEAR_SCREEN \
	$(FULL_FILES) \
	-create-app -o $(BUILD_PATH)/FULL_rex.bin	
	rm $(BUILD_PATH)/FULL_rex_BSS.bin
	rm $(BUILD_PATH)/FULL_rex.bin

	
rex_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +rex $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__REX__ \
	-DTURN_BASED \
	-vn \
	-DBUFFERED \
	-DSTDLIB \
	-DNO_COLOR \
	-DFULL_GAME -DSOUNDS \
	-lndos \
	-DNO_PRINT \
	-DNO_WAIT \
	-DNO_SLEEP \
	-DNO_INPUT \
	-DNO_INIT_GRAPHICS \
	-DDEFAULT_CLEAR_SCREEN \
	$(FULL_FILES) \
	-create-app -o $(BUILD_PATH)/FULL_rex_buffered.bin
	rm $(BUILD_PATH)/FULL_rex_buffered_BSS.bin
	rm $(BUILD_PATH)/FULL_rex_buffered.bin	
	

g800_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +g800 $(SCCZ80_OPTS) -clib=g850b $(INCLUDE_OPTS) \
	-D__G800__ \
	-DTURN_BASED \
	-DNO_BLINKING \
	-vn \
	-DFULL_GAME \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o 
	rm a.bin 
	rm a.rom
	mv a.ihx $(BUILD_PATH)/FULL_g800_turn_based.ihx
	
g800_tiny_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +g800 $(SCCZ80_OPTS) -clib=g850b $(INCLUDE_OPTS) \
	-D__G800__ \
	-DTURN_BASED \
	-DNO_BLINKING \
	-vn \
	-DFORCE_CONIO_LIB \
	-DTINY_GAME \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(TINY_FILES) \
	-create-app -o
	rm a.bin
	rm a.rom
	mv a.ihx $(BUILD_PATH)/TINY_g800_turn_based.ihx

ts2068:
	$(Z88DK_PATH)$(MYZ88DK) +ts2068 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-clib=ansi \
	-D__TS2068__ \
	-DNO_COLOR \
	-vn \
	-DFULL_GAME \
	-DLESS_TEXT \
	-lndos \
	-DALT_PRINT \
	-DZ88DK_SPRITES \
	-DANIMATE_PLAYER \
	-DNO_INIT_GRAPHICS \
	-DBETWEEN_LEVEL -DEND_SCREEN \
	$(FULL_FILES) \
	$(SOURCE_PATH)/end_screen.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	-create-app -o $(BUILD_PATH)/FULL_ts2068.bin 
	rm $(BUILD_PATH)/FULL_ts2068.bin	
	rm $(BUILD_PATH)/FULL_ts2068_BANK_7.bin	
		
	
ts2068_characters:
	$(Z88DK_PATH)$(MYZ88DK) +ts2068 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-clib=ansi \
	-D__TS2068__ \
	-DNO_COLOR \
	-vn \
	-DFULL_GAME \
	-lndos \
	-DFORCE_CONIO_LIB \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o $(BUILD_PATH)/FULL_ts2068.bin 
	rm $(BUILD_PATH)/FULL_ts2068.bin		
	
ts2068_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +ts2068 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-clib=ansi \
	-DTURN_BASED \
	-D__TS2068__ \
	-DNO_COLOR \
	-vn \
	-DFULL_GAME \
	-lndos \
	-DFORCE_CONIO_LIB \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o $(BUILD_PATH)/FULL_ts2068_turn_based.bin 
	rm $(BUILD_PATH)/FULL_ts2068_turn_based.bin	

aussie_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -laussie  \
	$(INCLUDE_OPTS) \
	-vn \
	-D__AUSSIE__ \
	-DSOUNDS \
	-DFORCE_BIT_BANG \
	-DFORCE_XSIZE=16 \
	-DFORCE_YSIZE=12 \
	-DNO_COLOR \
	-DFULL_GAME \
	-DTURN_BASED \
	-DBUFFERED \
	-DNO_INIT_GRAPHICS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES) \
	-create-app	
	rm a.bin
	mv a.COM $(BUILD_PATH)/FULL_aussie.COM
	
# TODO: Try -subtype=com
enterprise_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +enterprise $(ZSDCC_OPTS)  \
	$(INCLUDE_OPTS) \
	-compiler=sdcc \
	-vn \
	-D__ENTERPRISE__ \
	-DFORCE_XSIZE=20 \
	-DFORCE_YSIZE=16 \
	-DNO_COLOR \
	-DFULL_GAME \
	-DTURN_BASED \
	-DBUFFERED \
	-DNO_INIT_GRAPHICS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	-DSTDLIB \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES) \
	-create-app
	mv a.app FULL_enterprise.app
	rm a.bin
	tar czvf FULL_enterprise.tar.zip FULL_enterprise.app
	rm FULL_enterprise.app
	mv FULL_enterprise.tar.zip $(BUILD_PATH)


mz2500_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +mz2500 $(ZSDCC_OPTS) \
	$(INCLUDE_OPTS) \
	-SO3 \
	-compiler=sdcc \
	-DFORCE_XSIZE=16 \
	-DFORCE_YSIZE=12 \
	-DFORCE_GHOSTS_NUMBER=6 \
	-DFORCE_BOMBS_NUMBER=4 \
	-D__MZ2500__ \
	-vn \
	-DNO_COLOR \
	-DFULL_GAME \
	-DNO_BLINKING \
	-DNO_CONTROL_INSTRUCTIONS \
	-DNO_DEAD_GHOSTS \
	-DNO_SLEEP \
	-DNO_INITIAL_SCREEN \
	-DNO_SET_SCREEN_COLORS \
	-lndos \
	-DBUFFERED -DNO_INIT_GRAPHICS \
	-DFORCE_NARROW \
	-DNO_STATS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	-DSTDLIB \
	-DNO_WAIT \
	-DTURN_BASED \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	-create-app 
	mv a.2D $(BUILD_PATH)/FULL_mz2500_buffered.2D
	rm a.bin

mz2500_random:
	$(Z88DK_PATH)$(MYZ88DK) +mz2500 $(ZSDCC_OPTS) -compiler=sdcc -SO3 $(INCLUDE_OPTS) \
	$(SOURCE_PATH)/../experiments/random_test.c \
	-create-app -o $(BUILD_PATH)/mz2500_random_test.bin

# It almost works except for TURN_BASED
mz2500_tiny_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +mz2500 $(ZSDCC_OPTS) \
	$(INCLUDE_OPTS) \
	-SO3 \
	-compiler=sdcc \
	-DFORCE_XSIZE=16 \
	-DFORCE_YSIZE=12 \
	-DFORCE_GHOSTS_NUMBER=6 \
	-DFORCE_BOMBS_NUMBER=4 \
	-D__MZ2500__ \
	-vn \
	-DNO_COLOR \
	-DTINY_GAME \
	-DNO_BLINKING \
	-DNO_CONTROL_INSTRUCTIONS \
	-DNO_DEAD_GHOSTS \
	-DNO_SLEEP \
	-DNO_INITIAL_SCREEN \
	-DNO_SET_SCREEN_COLORS \
	-lndos \
	-DBUFFERED -DNO_INIT_GRAPHICS \
	-DFORCE_NARROW \
	-DNO_STATS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	-DSTDLIB \
	-DNO_WAIT \
	-DTURN_BASED \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	$(TINY_FILES) \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	-create-app 
	mv a.dsk $(BUILD_PATH)/TINY_mz2500_buffered.dsk
	rm a.bin


newbrain:
	$(Z88DK_PATH)$(MYZ88DK) +newbrain $(ZSDCC_OPTS) $(INCLUDE_OPTS) \
	-D__NEWBRAIN__ \
	-SO3 \
	-compiler=sdcc \
	-DFORCE_XSIZE=20 \
	-DFORCE_YSIZE=11 \
	-DFORCE_GHOSTS_NUMBER=8 \
	-DFORCE_BOMBS_NUMBER=4 \
	-vn \
	-DNO_COLOR \
	-DFULL_GAME \
	-DNO_BLINKING \
	-DNO_CONTROL_INSTRUCTIONS \
	-DNO_SLEEP \
	-DNO_INITIAL_SCREEN \
	-DNO_SET_SCREEN_COLORS \
	-lndos \
	-DBUFFERED -DNO_INIT_GRAPHICS \
	-DFORCE_NARROW \
	-DNO_STATS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	-DSTDLIB \
	-DNO_WAIT \
	-DTURN_BASED \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	-create-app
	tar czvf FULL_newbrain.tar.zip _dir.txt a.bas a.dat
	mv FULL_newbrain.tar.zip $(BUILD_PATH)
	rm _dir.txt
	rm a.bas
	rm a.dat
	rm a.bin	

	
test:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(ZSDCC_OPTS) \
	$(INCLUDE_OPTS) \
	-SO3 \
	-compiler=sdcc \
	-DFORCE_XSIZE=16 \
	-DFORCE_YSIZE=16 \
	-DFORCE_GHOSTS_NUMBER=6 \
	-DFORCE_BOMBS_NUMBER=2 \
	-vn \
	-DNO_COLOR \
	-DTINY_GAME \
	-DNO_BLINKING \
	-DNO_CONTROL_INSTRUCTIONS \
	-DNO_DEAD_GHOSTS \
	-DNO_SLEEP \
	-DNO_INITIAL_SCREEN \
	-DNO_SET_SCREEN_COLORS \
	-lndos \
	-DBUFFERED -DNO_INIT_GRAPHICS \
	-DFORCE_NARROW \
	-DNO_STATS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	-DSTDLIB \
	-DNO_WAIT \
	-DTURN_BASED \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(TINY_FILES) \
	-create-app
	rm a.bin
	mv A.COM $(BUILD_PATH)/TINY_CPM_TINY_BUFFERED.COM

	
# OK
cpm_tiny_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DSTDLIB \
	-DFORCE_XSIZE=24 \
	-DFORCE_YSIZE=16 \
	-DNO_COLOR \
	-DTINY_GAME \
	-DTURN_BASED \
	-DBUFFERED \
	-DNO_INIT_GRAPHICS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(TINY_FILES) \
	-create-app
	rm a.bin
	mv A.COM $(BUILD_PATH)/TINY_CPM_TINY_BUFFERED.COM
	

pps:
	$(Z88DK_PATH)$(MYZ88DK) +pps $(SCCZ80_OPTS) $(INCLUDE_OPTS) -pragma-redirect:fputc_cons=fputc_cons_generic \
	-D__PPS__ -vn \
	-DCONIO_VT52 \
	-DFULL_GAME -DSOUNDS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv a.bin $(BUILD_PATH)/FULL_pps.exe	
	
pps_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +pps $(SCCZ80_OPTS) $(INCLUDE_OPTS) -pragma-redirect:fputc_cons=fputc_cons_generic \
	-D__PPS__ -vn \
	-DCONIO_VT52 \
	-DTURN_BASED \
	-DFULL_GAME -DSOUNDS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv a.bin $(BUILD_PATH)/FULL_pps_turn_based.exe


kc_tiny_udg:
	$(Z88DK_PATH)$(MYZ88DK) +kc $(SCCZ80_OPTS) -subtype=tap $(INCLUDE_OPTS) \
	-D__KC__ \
	-DTINY_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(TINY_FILES) \
	-create-app -o$(BUILD_PATH)/TINY_kc.bin
	rm $(BUILD_PATH)/TINY_kc.bin

kc_light_udg:
	$(Z88DK_PATH)$(MYZ88DK) +kc $(SCCZ80_OPTS) -subtype=tap $(INCLUDE_OPTS) \
	-D__KC__ \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(LIGHT_FILES) \
	-create-app -o$(BUILD_PATH)/LIGHT_kc.bin
	rm $(BUILD_PATH)/LIGHT_kc.bin
	
	
kc_udg:
	$(Z88DK_PATH)$(MYZ88DK) +kc $(SCCZ80_OPTS) -subtype=tap $(INCLUDE_OPTS) \
	-D__KC__ \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	chase/end_screen.c \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_kc.bin
	rm $(BUILD_PATH)/FULL_kc.bin

rx78_udg:
	$(Z88DK_PATH)$(MYZ88DK) +rx78 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__RX78__ \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	chase/end_screen.c \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_rx78.bin
	rm $(BUILD_PATH)/FULL_rx78.bin
	rm $(BUILD_PATH)/FULL_rx78_DATA.bin
	rm $(BUILD_PATH)/FULL_rx78_BSS.bin
	

# UDG can be done but differently
pv1000_light:
	$(Z88DK_PATH)$(MYZ88DK) +pv1000 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__PV1000__ \
	-DZ88DK_JOYSTICK \
	-DCONIO_VT52 \
	-DCONIO \
	-DNO_INIT_GRAPHICS \
	-lndos \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(LIGHT_FILES) \
	-create-app -o$(BUILD_PATH)/LIGHT_pv1000.bin
	rm $(BUILD_PATH)/LIGHT_pv1000.bin	
	rm $(BUILD_PATH)/LIGHT_pv1000_DATA.bin	
	rm $(BUILD_PATH)/LIGHT_pv1000_BSS.bin	
	
# UDG can be done but differently
pv1000:
	$(Z88DK_PATH)$(MYZ88DK) +pv1000 $(ZSDCC_OPTS) \
	-compiler=sdcc \
	$(INCLUDE_OPTS) \
	-D__PV1000__ \
	-DZ88DK_JOYSTICK \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO_VT52 \
	-DCONIO \
	-DNO_INIT_GRAPHICS \
	-lndos \
	-DLESS_TEXT \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	chase/end_screen.c \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_pv1000.bin
	rm $(BUILD_PATH)/FULL_pv1000.bin
	rm $(BUILD_PATH)/FULL_pv1000_DATA.bin
	rm $(BUILD_PATH)/FULL_pv1000_BSS.bin


pv2000_udg:
	$(Z88DK_PATH)$(MYZ88DK) +pv2000 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__PV1000__ \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-DLESS_TEXT \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	chase/end_screen.c \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_pv2000.bin
	rm $(BUILD_PATH)/FULL_pv2000.bin
	rm $(BUILD_PATH)/FULL_pv2000_DATA.bin
	rm $(BUILD_PATH)/FULL_pv2000_BSS.bin

super80:
	$(Z88DK_PATH)$(MYZ88DK) +super80 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__SUPER80__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=16 \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO \
	-DCONIO_VT52 \
	-DNO_INIT_GRAPHICS \
	-lndos \
	chase/end_screen.c \
	$(FULL_FILES) \
	-create-app 
	mv a.ql $(BUILD_PATH)/FULL_super80.ql
	rm a.bin	
	
super80r:
	$(Z88DK_PATH)$(MYZ88DK) +super80 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=vduem \
	-D__SUPER80R__ \
	-DFORCE_XSIZE=80 \
	-DFORCE_YSIZE=25 \
	-DUDG_GRAPHICS \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO \
	-DCONIO_VT52 \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	chase/end_screen.c \
	$(FULL_FILES) \
	-lndos \
	-create-app
	mv a.ql $(BUILD_PATH)/FULL_super80r.ql
	rm a.bin

	
coleco_adam:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) $(INCLUDE_OPTS) -subtype=adam \
	-D__COLECO_ADAM__ \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO_VT52 \
	-DCONIO \
	-DNO_INIT_GRAPHICS \
	-lndos \
	chase/end_screen.c \
	$(FULL_FILES) \
	-create-app 
	mv a.img $(BUILD_PATH)/FULL_coleco_adam.dsk
	rm a.bin
	
	
coleco_udg:
	$(Z88DK_PATH)$(MYZ88DK) +coleco $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__COLECO__ \
	-DZ88DK_JOYSTICK \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	chase/end_screen.c \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_coleco.bin
	rm $(BUILD_PATH)/FULL_coleco.bin
	rm $(BUILD_PATH)/FULL_coleco_DATA.bin	
	rm $(BUILD_PATH)/FULL_coleco_BSS.bin	


smc777:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=smc777 $(INCLUDE_OPTS) \
	-D__SMC777__ \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_smc777.bin
	rm $(BUILD_PATH)/FULL_smc777.bin


pencil2:
	$(Z88DK_PATH)$(MYZ88DK) +pencil2 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__PENCIL2__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=24 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_pencil2.bin
	rm $(BUILD_PATH)/FULL_pencil2.bin
	rm $(BUILD_PATH)/FULL_pencil2_BSS.bin
	rm $(BUILD_PATH)/FULL_pencil2_DATA.bin



homelab2:
	$(Z88DK_PATH)$(MYZ88DK) +homelab2 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__HOMELAB2__ \
	-DFORCE_XSIZE=40 \
	-DFORCE_YSIZE=25 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_homelab2.bin
	rm $(BUILD_PATH)/FULL_homelab2.bin


homelab:
	$(Z88DK_PATH)$(MYZ88DK) +homelab $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__HOMELAB__ \
	-DFORCE_XSIZE=64 \
	-DFORCE_YSIZE=32 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_homelab.bin
	rm $(BUILD_PATH)/FULL_homelab.bin

hemc:
	$(Z88DK_PATH)$(MYZ88DK) +hemc $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__HEMC__ \
	-DFORCE_XSIZE=64 \
	-DFORCE_YSIZE=24 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_hemc.bin
	rm $(BUILD_PATH)/FULL_hemc.bin


hgmc:
	$(Z88DK_PATH)$(MYZ88DK) +hgmc $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__HGMC__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=32 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_hgmc.bin
	rm $(BUILD_PATH)/FULL_hgmc.bin


kramermc:
	$(Z88DK_PATH)$(MYZ88DK) +kramermc $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__KRAMERMC__ \
	-DFORCE_XSIZE=64 \
	-DFORCE_YSIZE=16 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_kramermc.bin
	rm $(BUILD_PATH)/FULL_kramermc.bin


myvision:
	$(Z88DK_PATH)$(MYZ88DK) +myvision $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__MYVISION__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=24 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_myvision.bin
	rm $(BUILD_PATH)/FULL_myvision_BSS.bin
	rm $(BUILD_PATH)/FULL_myvision_DATA.bin


mikro80:
	$(Z88DK_PATH)$(MYZ88DK) +mikro80 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__MIKRO80__ \
	-DFORCE_XSIZE=48 \
	-DFORCE_YSIZE=32 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_mikro80.bin
	rm $(BUILD_PATH)/FULL_mikro80.bin


primo:
	$(Z88DK_PATH)$(MYZ88DK) +primo $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__PRIMO__ \
	-DFORCE_XSIZE=48 \
	-DFORCE_YSIZE=32 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_primo.bin
	rm $(BUILD_PATH)/FULL_primo.bin


pmd85:
	$(Z88DK_PATH)$(MYZ88DK) +pmd85 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__PMD85__ \
	-DFORCE_XSIZE=48 \
	-DFORCE_YSIZE=32 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_pmd85.bin
	rm $(BUILD_PATH)/FULL_pmd85.bin

rc700:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -subtype=rc700 $(INCLUDE_OPTS) \
	-D__RC700__ \
	-DFORCE_XSIZE=80 \
	-DFORCE_YSIZE=25 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_rc700.bin
	rm $(BUILD_PATH)/FULL_rc700.bin


gb:
	$(Z88DK_PATH)$(MYZ88DK) +gb $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__GB__ \
	-DFORCE_XSIZE=20 \
	-DFORCE_YSIZE=18 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_gb.bin
	rm $(BUILD_PATH)/FULL_gb.bin
	rm $(BUILD_PATH)/FULL_gb_BSS.bin
	rm $(BUILD_PATH)/FULL_gb_DATA.bin
	rm $(BUILD_PATH)/FULL_gb_BANK_1F.bin

m100:
	$(Z88DK_PATH)$(MYZ88DK) +m100 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__M100__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=24 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_m100.bin
	rm $(BUILD_PATH)/FULL_m100.bin

tvc:
	$(Z88DK_PATH)$(MYZ88DK) +tvc $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__TVC__ \
	-DFORCE_XSIZE=40 \
	-DFORCE_YSIZE=25 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_tvc.bin
	rm $(BUILD_PATH)/FULL_tvc.bin


zxn:
	$(Z88DK_PATH)$(MYZ88DK) +zxn $(SCCZ80_OPTS) -clib=classic -subtype=nex $(INCLUDE_OPTS) \
	-D__ZXN__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=24 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_zxn.bin
	rm $(BUILD_PATH)/FULL_zxn.bin
	rm $(BUILD_PATH)/FULL_zxn_UNASSIGNED.bin


rc2014:
	$(Z88DK_PATH)$(MYZ88DK) +rc2014 $(SCCZ80_OPTS)  $(INCLUDE_OPTS) \
	-D__ZXN__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=24 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_rc2014.bin


yaz180:
	$(Z88DK_PATH)$(MYZ88DK) +yaz180 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__ZXN__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=24 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_yaz180.bin


vector06c:
	$(Z88DK_PATH)$(MYZ88DK) +vector06c $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__VECTOR06C__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=32 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_vector06c.bin
	rm $(BUILD_PATH)/FULL_vector06c.bin


pasopia7:
	$(Z88DK_PATH)$(MYZ88DK) +pasopia7 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__PASOPIA__ \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_pasopia7.bin
	rm $(BUILD_PATH)/FULL_pasopia7.bin
	rm $(BUILD_PATH)/FULL_pasopia7_BOOTSTRAP.bin	
	
	
z80tvgame: 
	$(Z88DK_PATH)$(MYZ88DK) +z80tvgame $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__PASOPIA__ \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_z80tvgame.bin
	rm $(BUILD_PATH)/FULL_z80tvgame.bin
	rm $(BUILD_PATH)/FULL_z80tvgame_DATA.bin	
	rm $(BUILD_PATH)/FULL_z80tvgame_BSS.bin	

	
multi8_tiny_udg:
	$(Z88DK_PATH)$(MYZ88DK) +multi8 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__MULTI8__ \
	-DTINY_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(TINY_FILES) \
	-create-app -o$(BUILD_PATH)/TINY_multi8.bin
	rm $(BUILD_PATH)/TINY_multi8.bin		


multi8_light_udg:
	$(Z88DK_PATH)$(MYZ88DK) +multi8 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__MULTI8__ \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	$(LIGHT_FILES) \
	-create-app -o$(BUILD_PATH)/LIGHT_multi8.bin
	rm $(BUILD_PATH)/LIGHT_multi8.bin		
	
multi8_udg:
	$(Z88DK_PATH)$(MYZ88DK) +multi8 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	$(CROSS_LIB_PATH)/boot/multi8/bootstrap.c \
	-create-app -o bootstrap
	rm bootstrap
	$(Z88DK_PATH)$(MYZ88DK) +multi8 $(SCCZ80_OPTS) -subtype=64k \
	$(INCLUDE_OPTS) \
	-D__MULTI8__ \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-DNO_HINTS \
	-DSIMPLE_STRATEGY \
	-DLESS_TEXT \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	chase/end_screen.c \
	$(FULL_FILES) \
	-create-app -o code
	rm code
	cat bootstrap.cas code.cas > $(BUILD_PATH)/FULL_multi8.cas
	rm bootstrap.cas
	rm code.cas
	
spc1000_udg:
	$(Z88DK_PATH)$(MYZ88DK) +spc1000 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__SPC1000__ \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(CROSS_LIB_PATH)/display/graphics_data/z88dk/xchase.asm \
	chase/end_screen.c \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_spc1000.bin
	rm $(BUILD_PATH)/FULL_spc1000.bin
	

# 	--opt-code-size 
gal_6k:
	$(Z88DK_PATH)$(MYZ88DK) +gal $(ZSDCC_OPTS) \
	-compiler=sdcc \
	$(INCLUDE_OPTS) \
	-pragma-need=ansiterminal \
	--reserve-regs-iy \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	-DTINY_GAME \
	-DNO_SLEEP -DLESS_TEXT \
	-D__GAL__ \
	-DALT_MOVE \
	-DNO_RANDOM_LEVEL \
	-DNO_SET_SCREEN_COLORS \
	-DFORCE_BOMBS_NUMBER=4 \
	-DFORCE_GHOSTS_NUMBER=8 \
	-DNO_DEAD_GHOSTS \
	-DNO_INIT_GRAPHICS \
	-DFLAT_ENEMIES \
	-DALT_HIGHSCORE \
	-DCONIO \
	-DUSE_TINY_MEMORY_BUFFERS \
	-lndos -create-app -Cz--audio -o  $(BUILD_PATH)/TINY_galaksija_6k.prg \
	$(TINY_FILES) \
	$(CROSS_LIB_PATH)/memory/gal_memory.asm
	rm $(BUILD_PATH)/TINY_galaksija_6k.prg
	#rm $(BUILD_PATH)/TINY_galaksija_6k.wav


osca:
	$(Z88DK_PATH)$(MYZ88DK) +osca $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-clib=ansi -D__OSCA__ -vn \
	-DFULL_GAME \
	-DSOUNDS  -lndos \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app  \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm a.bin
	mv A.EXE $(BUILD_PATH)/FULL_OSCA.EXE
	
	


# cannot run in Mame (Kaypro 2x)
# 	--max-allocs-per-node200000 -SO3 --opt-code-size 
#	-compiler=sdcc
# MAX: 79, 21 
cpm_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DSTDLIB \
	-DFORCE_XSIZE=24 \
	-DFORCE_YSIZE=16 \
	-DNO_COLOR \
	-DFULL_GAME \
	-DTURN_BASED \
	-DBUFFERED \
	-DNO_INIT_GRAPHICS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES) \
	-create-app
	rm a.bin
	mv A.COM $(BUILD_PATH)/FULL_CPM_BUFFERED.COM
	# cp $(BUILD_PATH)/FULL_CPM_BUFFERED.COM $(BUILD_PATH)/CPM.COM
    
    

# ----------------------------------------------------------------

aussie_targets: \
	aussie_buffered

eg2k_targets: \
	eg2k_udg

pps_targets: \
	pps

pv2000_targets: \
	pv2000_udg

srr_targets: \
	srr_udg

m5_targets: \
	m5_udg

ti82_targets: \
	ti82

ti83_targets: \
	ti83

ti8x_targets: \
	ti8x
	
ti85_targets: \
	ti85
	
ti86_targets: \
	ti86_light
	
tiki100_targets: \
	tiki100

enterprise_targets: \
	enterprise_buffered
	
mz2500_targets: \
	mz2500_tiny_buffered
	
einstein_targets: \
	einstein
	
newbrain_targets: \
	newbrain

kaypro_targets: \
	kaypro
	
tiki100_targets: \
	tiki100

osca_targets: \
	osca
	
camputers_lynx_targets: \
	camputers_lynx camputers_lynx_tiny
	
attache_targets: \
	attache attache_chars
	
osborne1_targets: \
	osborne1 osborne1_chars
	
z1013_targets: \
	z1013
	
x1_targets: \
	x1

px4_targets: \
	px4 

px8_targets: \
	px8
	
kc_targets: \
	kc_tiny_udg kc_light_udg kc_udg
	
trs80_targets: \
	trs80_chars trs80_tiny trs80 trs80_cmd

cpm_z80_targets: \
	cpm_adm3a cpm_vt52 cpm_vt100 

nascom_targets: \
	nascom_16k nascom_32k 
	
pc6001_targets: \
	pc6001_16k pc6001_32k_udg 	
	
z9001_targets: \
	z9001_16k_full z9001_32k

vg5k_targets: \
	vg5k_udg vg5k_exp_16k_udg
	
sc3000_targets: \
	sc3000_16k sc3000_32k_udg sg1000_udg
	
ace_targets: \
	ace_exp_16k_udg

cpc_targets: \
	cpc
	
mc1000_targets: \
 	mc1000_16k_full mc1000_48k_udg mc1000_48k_udg_joystick
	
mz_targets: \
 	mz
	
mtx_targets: \
	mtx_udg
		
abc80_targets: \
	abc80_light abc80
	
pc88_targets: \
	pc88
	
super80_targets: \
	super80 super80r
	
p2000_targets: \
	p2000_16k p2000_32k

svi_targets: \
	svi_318 svi_328_udg_cursor

msx_targets: \
	msx_32k_rom msx_32k

c128_z80_targets: \
	c128_z80_40col c128_z80_80col
	
aquarius_targets: \
	aquarius_exp_4k aquarius_exp_16k
	
vz200_targets: \
	vz200_8k vz200_18k vz200_sprites_18k
	
microbee_targets: \
	microbee_16k microbee_32k
	
gal_targets: \
	gal_6k gal_22k
	
zx80_targets: \
	zx80_16k_turn_based
	
zx81_targets_ijkl_spc: \
	zx81_16k zx81_16k_turn_based zx81_16k_wrx zx81_32k_wrx zx81_32k_wrx_turn_based
  
zx81_targets_qaopm: \
	zx81_16k_qaopm zx81_16k_turn_based_qaopm zx81_16k_wrx_qaopm zx81_32k_wrx_qaopm zx81_32k_wrx_turn_based_qaopm

zx81_targets: \
    zx81_targets_ijkl_spc
	
spectrum_targets: \
	spectrum_16k spectrum_48k

ts2068_targets: \
	ts2068
	
g800_targets: \
	g800_turn_based
	
rx78_targets: \
	rx78_udg
	
pv1000_targets: \
	pv1000_light pv1000
	
coleco_targets: \
	coleco_udg coleco_adam
	
multi8_targets: \
	multi8_udg
	
spc1000_targets: \
	spc1000_udg
	
alphatro_targets: \
	alphatro
	
fp1100_targets: \
	fp1100

samcoupe_targets: \
	samcoupe
	
lambda_targets: \
	lambda_16k
	
nc100_targets: \
	nc100
	
nc200_targets: \
	nc200

laser500_targets: \
	laser500
	
oz_targets: \
	oz_tiny_buffered
	
z88_targets: \
	z88_tiny_buffered
	
sos_targets: \
	sos_buffered sos_tiny_buffered

sms_targets: \
	sms_tiny_buffered
	
excalibur64_targets: \
	excalibur64
	
smc777_targets: \
	smc777
	
pasopia7_targets: \
	pasopia7
	
z80tvgame_targets: \
	z80tvgame
	
qc10_targets: \
	qc10
	    
dmv_targets: \
	dmv
	
bic_targets: \
	bic
	
sv8000_targets: \
	sv8000

tvc_targets: \
	tvc
	
rc700_targets: \
	rc700
	    
myvision_targets: \
	myvision
	
kramermc_targets: \
	kramermc
	
hgmc_targets: \
	hgmc

hemc_targets: \
	hemc
	    
homelab2_targets: \
	homelab2
	
homelab_targets: \
	homelab
	
pencil2_targets: \
	pencil2

m100_targets: \
	m100
	
vector06c_targets: \
	vector06c
	
pmd85_targets: \
	pmd85

gb_targets: \
	gb
	
mikro80_targets: \
	mikro80

primo_targets: \
	primo
