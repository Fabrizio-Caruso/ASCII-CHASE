# ------------------------------------------------------------------------------------------
# Z88DK L-P
#

z88dk_targets_l-p: \
	lambda_targets \
	laser500_targets \
	m5_targets \
	microbee_targets \
	mikro80_targets \
	msx_targets \
	mtx_targets \
	multi8_targets \
	myvision_targets \
	mz_targets \
	mz2500_targets \
	nascom_targets \
	nc100_targets \
	nc200_targets \
	newbrain_targets \
	ondra_targets \
	osborne1_targets \
	osca_targets \
	pasopia7_targets \
	pencil2_targets \
	p2000_targets \
	pc6001_targets \
	pc88_targets \
	pmd85_targets \
	pps_targets \
	primo_targets \
	pv2000_targets \
	px4_targets \
	px8_targets


# ------------------------------------------------------------------------------------------

lambda_targets: \
	lambda_16k

laser500_targets: \
	laser500

m5_targets: \
	m5

microbee_targets: \
	microbee_16k_no_gfx microbee_32k

mikro80_targets: \
	mikro80

msx_targets: \
	msx_32k_rom

mtx_targets: \
	mtx mtx500

multi8_targets: \
	multi8

myvision_targets: \
	myvision

mz_targets: \
	mz

mz2500_targets: \
	mz2500

nc100_targets: \
	nc100

nc200_targets: \
	nc200

nascom_targets: \
	nascom_16k nascom_32k

newbrain_targets: \
	newbrain

ondra_targets: \
	ondra

osborne1_targets: \
	osborne1 osborne1_chars

osca_targets: \
	osca

p2000_targets: \
	p2000_16k p2000_32k

pasopia7_targets: \
	pasopia7

pencil2_targets: \
	pencil2

pc6001_targets: \
	pc6001_16k pc6001_32k

pc88_targets: \
	pc88

pmd85_targets: \
	pmd85

pps_targets: \
	pps

primo_targets: \
	primo

pv2000_targets: \
	pv2000

px4_targets: \
	px4 

px8_targets: \
	px8

# ------------------------------------------------------------------------------------------


#############################
# LAMBDA

lambda: lambda_16k

lambda_16k:
	$(Z88DK_PATH)$(MYZ88DK) +lambda $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-vn -D__LAMBDA__ -DFULL_GAME \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o  $(BUILD_PATH)/FULL_lambda_16k.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_lambda_16k.prg


#############################
# LASER500

laser500:
	$(Z88DK_PATH)$(MYZ88DK) +laser500 $(SCCZ80_OPTS) -vn -Cz--audio \
	-create-app -o laser500.bin \
	$(INCLUDE_OPTS) \
	-D__LASER500__ \
	-DFORCE_BIT_BANG -DSOUNDS \
	-DFULL_GAME \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	$(FULL_FILES)
	mv laser500.bin $(BUILD_PATH)/FULL_laser500.bin
	rm laser500.cas
	mv laser500.wav $(BUILD_PATH)/FULL_laser500.wav


	# -compiler=sdcc 
laser500_bitmap: 	
	$(Z88DK_PATH)$(MYZ88DK) +laser500 $(SCCZ80_OPTS) -vn -Cz--audio -v \
	-create-app -o laser500bm.bin \
	$(INCLUDE_OPTS) \
	-D__LASER500__ -DLASER500_BITMAP \
	-DFORCE_BIT_BANG -DSOUNDS -DNO_STATS \
	-DTINY_GAME \
	-DNO_GRAPHICS -DNO_PRINT -DNO_INPUT -DNO_SET_SCREEN_COLORS \
	-lndos \
	$(TINY_FILES) \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/laser500/laser500_bitmap_init_graphics.c
	mv laser500bm.bin $(BUILD_PATH)/TINY_laser500_bitmap.bin
	rm laser500bm.cas
	mv laser500bm.wav $(BUILD_PATH)/TINY_laser500_bitmap.wav


#############################
# M5

m5: $(ASSETS_PATH)/z88dk_xchase.asm 
	$(Z88DK_PATH)$(MYZ88DK) +m5 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-lm -create-app -Cz--audio -subtype=tape \
	-pragma-define:REGISTER_SP=65000 \
	-D__M5__ \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-DFULL_GAME -DLESS_TEXT \
	-DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(ASSETS_PATH)/z88dk_xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-o$(BUILD_PATH)/FULL_m5.bin	
	rm $(BUILD_PATH)/FULL_m5.bin
	rm $(BUILD_PATH)/FULL_m5.cas


#############################
# MICROBEE

microbee_16k_no_gfx:
	$(Z88DK_PATH)$(MYZ88DK) +bee $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__BEE__ -clib=ansi -vn -DSOUNDS  \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/LIGHT_microbee_16k_no_gfx.prg  \
	$(LIGHT_FILES)
	rm $(BUILD_PATH)/LIGHT_microbee_16k_no_gfx.prg


microbee: microbee_32k

microbee_32k: $(ASSETS_PATH)/z88dk_sprites_definitions.h
	$(Z88DK_PATH)$(MYZ88DK) +bee $(SCCZ80_OPTS) -lgfxnc100 \
	$(INCLUDE_OPTS) \
	-D__NC100__ \
	-DALT_PRINT \
	-DFULL_GAME \
	-DZ88DK_SPRITES \
	-DLESS_TEXT \
	-DANIMATE_PLAYER \
	-create-app -o$(BUILD_PATH)/FULL_microbee_32k.bin \
	-DNO_INIT_GRAPHICS \
	-DINITIAL_GHOST_FREEZE -DSOUNDS -DFORCE_BIT_BANG \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_microbee_32k.bin


#############################
# MIKRO80

mikro80:
	$(Z88DK_PATH)$(MYZ88DK) +mikro80 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__MIKRO80__ \
	-DFORCE_XSIZE=64 \
	-DFORCE_YSIZE=30 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_mikro80.bin
	rm $(BUILD_PATH)/FULL_mikro80.bin


#############################
# MSX

msx: msx_32k_rom 

msx_32k_rom: $(ASSETS_PATH)/8x8_chars.h
	$(Z88DK_PATH)$(MYZ88DK) +msx $(SCCZ80_OPTS) $(INCLUDE_OPTS) -lmsxbios \
	-DUSE_MSX_BIOS \
	-DINITIAL_SLOWDOWN=29000 \
	-DSOUNDS -DFORCE_PSG -DANIMATE_PLAYER \
	-vn -DMSX_VPOKE -DFULL_GAME -D__MSX__ -DEND_SCREEN -DBETWEEN_LEVEL \
	-lndos -subtype=rom \
	-create-app -o $(BUILD_PATH)/FULL_msx_32k.rom \
	-DMEMORY_MAPPED \
	-DDEFAULT_CLEAR_SCREEN \
	-DALT_PRINT \
	-DLESS_TEXT \
	-DZ88DK_JOYSTICK \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/msx/msx_redefined_chars_init_graphics.c	\
	$(CROSS_LIB_PATH)/sound/z88dk/psg/psg_sounds.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_msx_32k_BSS.bin
	rm $(BUILD_PATH)/FULL_msx_32k_DATA.bin


#############################
# MTX

mtx: mtx512

mtx512: mtx512_turn_based

mtx512_turn_based: $(ASSETS_PATH)/z88dk_xchase.asm
	$(Z88DK_PATH)$(MYZ88DK) +mtx $(SCCZ80_OPTS) -clib=ansi -startup=2 $(INCLUDE_OPTS) \
	-D__MTX__ -DFORCE_SCREEN_MODE=2 \
	-create-app -oMTX.bin -vn \
	-DFULL_GAME -DSOUNDS  -DEND_SCREEN -DBETWEEN_LEVEL -DTURN_BASED \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(ASSETS_PATH)/z88dk_xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) 
	rm MTX.bin
	mv MTX.wav $(BUILD_PATH)/FULL_$@.wav
	mv MTX.mtx $(BUILD_PATH)/FULL_$@.mtx
    
	# cp $(BUILD_PATH)/FULL_$@.mtx /cygdrive/c/Emulation/TEST/memu/tapes/mtx512.mtx


mtx500: mtx500_turn_based

mtx500_turn_based: $(ASSETS_PATH)/z88dk_xchase.asm
	$(Z88DK_PATH)$(MYZ88DK) +mtx $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__MTX__ \
	-create-app -oMTX500.bin -vn \
	-DFULL_GAME -DSOUNDS  -DEND_SCREEN -DBETWEEN_LEVEL -DTURN_BASED \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(ASSETS_PATH)/z88dk_xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) 
	rm MTX500.bin
	mv MTX500.wav $(BUILD_PATH)/FULL_$@.wav
	mv MTX500.mtx $(BUILD_PATH)/FULL_$@.mtx
    
	# cp $(BUILD_PATH)/FULL_$@.mtx /cygdrive/c/Emulation/TEST/memu/tapes/mtx500.mtx

htron_mtx: 
	zcc +mtx -pragma-redirect:fputc_cons=fputc_cons_generic -clib=ansi -create-app -startup=2 ./test/htron.c

#############################
# MULTI8

multi8: $(ASSETS_PATH)/z88dk_xchase.asm
	$(Z88DK_PATH)$(MYZ88DK) +multi8 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	$(CROSS_LIB_PATH)/boot/multi8/bootstrap.c \
	-create-app -o bootstrap
	rm bootstrap
	$(Z88DK_PATH)$(MYZ88DK) +multi8 $(SCCZ80_OPTS) -subtype=64k \
	$(INCLUDE_OPTS) \
	-D__MULTI8__ \
	-DFULL_GAME  -DSOUNDS -DFORCE_PSG \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-DNO_HINTS \
	-DSIMPLE_STRATEGY \
	-DLESS_TEXT \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(ASSETS_PATH)/z88dk_xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/sound/z88dk/psg/psg_sounds.c \
	-create-app -o code
	rm code
	cat bootstrap.cas code.cas > $(BUILD_PATH)/FULL_multi8.cas
	rm bootstrap.cas
	rm code.cas


#############################
# MYVISION

myvision: $(ASSETS_PATH)/z88dk_xchase.asm
	$(Z88DK_PATH)$(MYZ88DK) +myvision $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__MYVISION__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=22 \
	-DNO_SET_SCREEN_COLORS \
	-DFULL_GAME -DZ88DK_JOYSTICK \
	-DCONIO_VT52 -DUDG_GRAPHICS \
	-DCONIO -DANIMATE_PLAYER \
	-lndos -DSOUNDS -DFORCE_PSG \
	$(FULL_FILES) $(ASSETS_PATH)/z88dk_xchase.asm \
	$(CROSS_LIB_PATH)/sound/z88dk/psg/psg_sounds.c \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	-create-app -o$(BUILD_PATH)/FULL_myvision.bin
	rm $(BUILD_PATH)/FULL_myvision.bin
	rm $(BUILD_PATH)/FULL_myvision_BSS.bin
	rm $(BUILD_PATH)/FULL_myvision_DATA.bin


#############################
# MZ

mz:
	$(Z88DK_PATH)$(MYZ88DK) +mz $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__MZ__ -clib=ansi -pragma-define:ansicolumns=32 -vn \
	-DFULL_GAME -DSOUNDS  -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS  \
	-pragma-define:REGISTER_SP=0xd000 \
	-lndos -create-app -o $(BUILD_PATH)/FULL_mz.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_mz.prg
	mv $(BUILD_PATH)/FULL_mz.mzt $(BUILD_PATH)/FULL_mz.mzf


#############################
# MZ2500

# mz2500: mz2500_tiny_buffered

# It almost works except for TURN_BASED
# mz2500_tiny_buffered:
	# $(Z88DK_PATH)$(MYZ88DK) +mz2500 $(SCCZ80_OPTS) \
	# $(INCLUDE_OPTS) \
	# -DFORCE_XSIZE=16 \
	# -DFORCE_YSIZE=12 \
	# -DFORCE_GHOSTS_NUMBER=6 \
	# -DFORCE_BOMBS_NUMBER=4 \
	# -D__MZ2500__ \
	# -vn \
	# -DNO_COLOR \
	# -DTINY_GAME \
	# -DNO_BLINKING \
	# -DNO_CONTROL_INSTRUCTIONS \
	# -DNO_DEAD_GHOSTS \
	# -DNO_SLEEP \
	# -DNO_INITIAL_SCREEN \
	# -DNO_SET_SCREEN_COLORS \
	# -lndos \
	# -DBUFFERED -DNO_INIT_GRAPHICS \
	# -DFORCE_NARROW \
	# -DNO_STATS \
	# -DALT_PRINT \
	# -DDEFAULT_CLEAR_SCREEN \
	# -DSTDLIB \
	# -DNO_WAIT \
	# -DTURN_BASED \
	# -pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	# $(TINY_FILES) \
	# $(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	# -create-app -o mz2500
	# mv mz2500.dsk $(BUILD_PATH)/TINY_mz2500_buffered.dsk
	# rm mz2500


mz2500:
	$(Z88DK_PATH)$(MYZ88DK) +mz2500 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -vn -lndos \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	-D__MZ2500__ -DFORCE_XSIZE=40 -DFORXE_YSIZE=24  \
	-DCONIO -DNO_COLOR -DNO_INIT_GRAPHICS -DFORCE_CONIO_LIB \
	-create-app -o $(BUILD_PATH)/FULL_mz2500.prg \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_mz2500.prg

#############################
# NASCOM

nascom_16k:
	$(Z88DK_PATH)$(MYZ88DK) +nascom $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi -vn -lndos \
	-D__NASCOM__ \
	-DSOUNDS \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app -o $(BUILD_PATH)/LIGHT_nascom_16k.prg \
	$(LIGHT_FILES)
	rm $(BUILD_PATH)/LIGHT_nascom_16k.prg


nascom: nascom_32k

nascom_32k:
	$(Z88DK_PATH)$(MYZ88DK) +nascom $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi -vn -lndos \
	-D__NASCOM__ \
	-DSOUNDS \
	-DFULL_GAME \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/FULL_nascom_32k.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_nascom_32k.prg


#############################
# NC100

nc100: $(ASSETS_PATH)/z88dk_sprites_definitions.h
	$(Z88DK_PATH)$(MYZ88DK) +nc $(SCCZ80_ROM_OPTS) -lgfxnc100 \
	$(INCLUDE_OPTS) \
	-D__NC100__ \
	-DALT_PRINT \
	-DFULL_GAME \
	-DZ88DK_SPRITES \
	-DLESS_TEXT \
	-DANIMATE_PLAYER \
	-create-app -o$(BUILD_PATH)/FULL_nc100_alt_print.bin \
	-DNO_INIT_GRAPHICS \
	-DINITIAL_GHOST_FREEZE \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_nc100_alt_print.bin


#############################
# NC200

nc200: $(ASSETS_PATH)/z88dk_sprites_definitions.h
	$(Z88DK_PATH)$(MYZ88DK) +nc $(SCCZ80_ROM_OPTS) -lgfxnc200 \
	$(INCLUDE_OPTS) \
	-D__NC200__ \
	-DALT_PRINT \
	-DFULL_GAME \
	-DZ88DK_SPRITES \
	-DLESS_TEXT \
	-DANIMATE_PLAYER \
	-create-app -o$(BUILD_PATH)/FULL_nc200_alt_print.bin \
	-DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_nc200_alt_print.bin


#############################
# NEWBRAIN

newbrain:
	$(Z88DK_PATH)$(MYZ88DK) +newbrain $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__NEWBRAIN__ \
	-DFORCE_XSIZE=20 \
	-DFORCE_YSIZE=11 \
	-DFORCE_GHOSTS_NUMBER=8 \
	-DFORCE_BOMBS_NUMBER=4 \
	-vn \
	-DNO_COLOR \
	-DFULL_GAME \
	-DNO_BLINKING \
	-DNO_CONTROL_INSTRUCTIONS \
	-DNO_SLEEP \
	-DNO_INITIAL_SCREEN \
	-DNO_SET_SCREEN_COLORS \
	-lndos \
	-DBUFFERED -DNO_INIT_GRAPHICS \
	-DFORCE_NARROW \
	-DNO_STATS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	-DSTDLIB \
	-DNO_WAIT \
	-DTURN_BASED \
	-pragma-include:$(CFG_PATH)/z88dk/zpragma_clib.inc \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	-create-app -o newbrain
	tar czvf FULL_newbrain.tar.zip _dir.txt newbrain.bas newbrain.dat
	mv FULL_newbrain.tar.zip $(BUILD_PATH)
	rm _dir.txt
	rm newbrain.bas
	rm newbrain.dat
	rm newbrain


#############################
# ONDRA
ondra:
	$(Z88DK_PATH)$(MYZ88DK) +ondra $(SCCZ80_OPTS) $(INCLUDE_OPTS) -vn -lndos \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	-D__ONDRA__ -DFORCE_XSIZE=40 -DFORCE_YSIZE=30 -DFULL_GAME  \
	-DCONIO -DNO_COLOR -DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o $(BUILD_PATH)/FULL_ondra.prg
	rm $(BUILD_PATH)/FULL_ondra.prg


#############################
# OSCA

osca:
	$(Z88DK_PATH)$(MYZ88DK) +osca $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-clib=ansi -D__OSCA__ -vn \
	-DFULL_GAME \
	-DSOUNDS  -lndos \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-create-app -o osca \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm osca
	mv OSCA.EXE $(BUILD_PATH)/FULL_OSCA.EXE


#############################
# OSBORNE1

osborne1_chars:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -lgfxosborne1 -subtype=osborne1 \
	$(INCLUDE_OPTS) \
	-D__OSBORNE1__ \
	-DNO_COLOR \
	-DFORCE_CONIO_LIB \
	-DCONIO_ADM3A_WITH_UNDEF \
	-D__CPM_80X24__ \
	-DFULL_GAME -DLESS_TEXT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/FULL_osborne1_chars.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_osborne1_chars.bin


osborne1: $(ASSETS_PATH)/z88dk_sprites_definitions.h
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -lgfxosborne1 -subtype=osborne1 \
	$(INCLUDE_OPTS) \
	-D__OSBORNE1__ \
	-DNO_COLOR \
	-DFORCE_CONIO_LIB \
	-DFULL_GAME -DLESS_TEXT \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DALT_PRINT \
	-create-app -o$(BUILD_PATH)/FULL_osborne1.bin \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c
	rm $(BUILD_PATH)/FULL_osborne1.bin



#############################
# PACMAN
pacman:
	mkdir $(BUILD_PATH)/puckmod
	$(Z88DK_PATH)$(MYZ88DK) +pacman $(SCCZ80_OPTS)  $(INCLUDE_OPTS) \
	-D__PACMAN__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=24 \
	-DNO_SET_SCREEN_COLORS -DBUFFERED -DTURN_BASED \
	-DNO_COLOR -DALT_PRINT -DSTDLIB -DFORCE_NO_CONIO_LIB \
	-DFULL_GAME -DNO_WAIT  -DNO_SLEEP -DDEFAULT_CLEAR_SCREEN \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	-create-app -o$(BUILD_PATH)/FULL_pacman_buffered.bin
	cp $(TOOLS_PATH)/z88dk/pacman/pacman.5e $(BUILD_PATH)/puckmod
	cp $(TOOLS_PATH)/z88dk/pacman/pacman.5f $(BUILD_PATH)/puckmod
	mv $(BUILD_PATH)/FULL_pacman_buffered.0a $(BUILD_PATH)/puckmod/namcopac.6e
	mv $(BUILD_PATH)/FULL_pacman_buffered.0b $(BUILD_PATH)/puckmod/namcopac.6f
	mv $(BUILD_PATH)/FULL_pacman_buffered.0c $(BUILD_PATH)/puckmod/namcopac.6h
	mv $(BUILD_PATH)/FULL_pacman_buffered.0d $(BUILD_PATH)/puckmod/npacmod.6j
	rm $(BUILD_PATH)/FULL_pacman_buffered.bin
	rm $(BUILD_PATH)/FULL_pacman_buffered.rom
	rm $(BUILD_PATH)/FULL_pacman_buffered_BSS.bin
	rm $(BUILD_PATH)/FULL_pacman_buffered_DATA.bin


#############################
# P2000

p2000_16k:
	$(Z88DK_PATH)$(MYZ88DK) +p2000 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi -D__P2000__ -vn \
	-DSOUNDS  \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/LIGHT_p2000.prg \
	$(LIGHT_FILES)
	rm $(BUILD_PATH)/LIGHT_p2000.prg


p2000: p2000_32k

p2000_32k:
	$(Z88DK_PATH)$(MYZ88DK) +p2000 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi -D__P2000__ -vn \
	-DFULL_GAME -DSOUNDS  -DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO -DNO_INIT_GRAPHICS -DSOUNDS -DFORCE_BIT_BANG \
	-lndos -create-app -o $(BUILD_PATH)/FULL_p2000.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/FULL_p2000.prg	


#############################
# PASAPIA7

pasopia7:
	$(Z88DK_PATH)$(MYZ88DK) +pasopia7 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__PASOPIA__ \
	-DNO_SET_SCREEN_COLORS \
	-DFORCE_XSIZE=40 -DFORCE_YSIZE=23 \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_pasopia7.bin
	rm $(BUILD_PATH)/FULL_pasopia7.bin
	rm $(BUILD_PATH)/FULL_pasopia7_BOOTSTRAP.bin	


#############################
# PC6001

pc6001_16k:
	$(Z88DK_PATH)$(MYZ88DK) +pc6001 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -Cz--audio -clib=ansi \
	-D__PC6001__ \
	-DINITIAL_SLOWDOWN=31500 \
	-DALT_SLEEP \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/LIGHT_pc6001.prg  \
	$(CROSS_LIB_PATH)/sleep/sleep_macros.c \
	$(LIGHT_FILES)
	rm $(BUILD_PATH)/LIGHT_pc6001.prg
	rm $(BUILD_PATH)/LIGHT_pc6001.wav
	mv $(BUILD_PATH)/LIGHT_pc6001.cas $(BUILD_PATH)/LIGHT_pc6001.cp6	


pc6001: pc6001_32k

pc6001_32k: $(ASSETS_PATH)/z88dk_xchase.asm
	$(Z88DK_PATH)$(MYZ88DK) +pc6001 $(SCCZ80_OPTS) $(INCLUDE_OPTS) -Cz--audio -clib=ansi -subtype=32k \
	-D__PC6001__ -DFULL_GAME \
	-DINITIAL_SLOWDOWN=31500 \
	-DCONIO -DSOUNDS -DFORCE_PSG \
	-DANIMATE_PLAYER -DUDG_GRAPHICS \
	-DFORCE_SCREEN_MODE=2 \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(ASSETS_PATH)/z88dk_xchase.asm \
	-lndos -create-app -o $(BUILD_PATH)/FULL_pc6001_32k.prg \
	$(FULL_FILES) \
	$(CROSS_LIB_PATH)/sound/z88dk/psg/psg_sounds.c
	rm $(BUILD_PATH)/FULL_pc6001_32k.prg
	rm $(BUILD_PATH)/FULL_pc6001_32k.wav
	mv $(BUILD_PATH)/FULL_pc6001_32k.cas $(BUILD_PATH)/FULL_pc6001_32k.cp6


#############################
# PC88

pc88: pc88_tiny

pc88_full_exp:
	$(Z88DK_PATH)$(MYZ88DK) +pc88 $(SCCZ80_OPTS)  -Cz--audio $(INCLUDE_OPTS) -vn \
	-DSOUNDS -D__PC88__ -DFULL_GAME -DEND_SCREEN -DBETWEEN_LEVEL \
	-lndos -DFORCE_XSIZE=80 -DFORCE_YSEIZE=23 -DSLOW_DOWN=2500 \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	-DCONIO -DNO_INIT_GRAPHICS -DFORCE_BIT_BANG -DDEFAULT_CLEAR_SCREEN \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-create-app	\
	-o FULL_$@
	rm FULL_$@
	mv FULL_$@.wav $(BUILD_PATH)
	mv FULL_$@.t88 $(BUILD_PATH)

pc88_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +pc88 $(SCCZ80_OPTS)  -Cz--audio $(INCLUDE_OPTS) -vn \
	-D__PC88__ -DTINY_GAME  \
	-lndos -DFORCE_XSIZE=80 -DFORCE_YSEIZE=23 -DSLOW_DOWN=2500  \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	-DCONIO -DNO_INIT_GRAPHICS -DDEFAULT_CLEAR_SCREEN \
	$(TINY_FILES) \
	-create-app	\
	-o TINY_$@
	rm TINY_$@
	mv TINY_$@.wav $(BUILD_PATH)
	mv TINY_$@.t88 $(BUILD_PATH)

# tar czvf FULL_pc88.tar.zip FULL_pc88.t88 FULL_pc88.wav
# rm FULL_pc88.t88
# rm FULL_pc88.wav
# mv FULL_pc88.tar.zip $(BUILD_PATH)


#############################
# PENCIL2

# SOUNDS is broken (sound never stops)
pencil2:
	$(Z88DK_PATH)$(MYZ88DK) +pencil2 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__PENCIL2__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=22 \
	-DNO_SET_SCREEN_COLORS \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos -DFORCE_BIT_BANG -DSOUNDS \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_pencil2.bin
	rm $(BUILD_PATH)/FULL_pencil2.bin
	rm $(BUILD_PATH)/FULL_pencil2_BSS.bin
	rm $(BUILD_PATH)/FULL_pencil2_DATA.bin


#############################
# PMD85

pmd85:
	$(Z88DK_PATH)$(MYZ88DK) +pmd85 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__PMD85__ \
	-DFORCE_XSIZE=48 \
	-DFORCE_YSIZE=30 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_pmd85.bin
	rm $(BUILD_PATH)/FULL_pmd85.bin


#############################
# PPS

pps:
	$(Z88DK_PATH)$(MYZ88DK) +pps $(SCCZ80_OPTS) $(INCLUDE_OPTS) -pragma-redirect:fputc_cons=fputc_cons_generic \
	-D__PPS__ -vn \
	-o pps \
	-DCONIO_VT52 \
	-DFULL_GAME -DSOUNDS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv pps $(BUILD_PATH)/FULL_pps.exe	


#############################
# PRIMO

primo:
	$(Z88DK_PATH)$(MYZ88DK) +primo $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__PRIMO__ \
	-DFORCE_XSIZE=32 \
	-DFORCE_YSIZE=22 \
	-DNO_SET_SCREEN_COLORS \
	-DNO_COLOR \
	-DFULL_GAME  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos -DSOUNDS -DFORCE_BIT_BANG \
	-DNO_INIT_GRAPHICS \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_primo.bin
	rm $(BUILD_PATH)/FULL_primo.bin


#############################
# PV2000

# -SO3 necessary to build a 16k rom image
pv2000: $(ASSETS_PATH)/z88dk_xchase.asm
	$(Z88DK_PATH)$(MYZ88DK) +pv2000 $(SCCZ80_ROM_OPTS) \
	$(INCLUDE_OPTS) \
	-D__PV2000__ \
	-DFULL_GAME  \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-DLESS_TEXT \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(ASSETS_PATH)/z88dk_xchase.asm \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/FULL_pv2000.bin
	rm $(BUILD_PATH)/FULL_pv2000.bin
	rm $(BUILD_PATH)/FULL_pv2000_DATA.bin
	rm $(BUILD_PATH)/FULL_pv2000_BSS.bin


#############################
# PX4

px4: $(ASSETS_PATH)/z88dk_sprites_definitions.h
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_ROM_OPTS) -lpx4 \
	$(INCLUDE_OPTS) \
	-D__PX4__ \
	-DFULL_GAME \
	-subtype=px4 -Cz--32k \
	-create-app -o px4 \
	-vn -lndos \
	-DALT_PRINT \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	$(SOURCE_PATH)/end_screen.c \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	rm px4
	mv PX4.ROM $(BUILD_PATH)/FULL_px4.ROM


#############################
# PX8

px8: $(ASSETS_PATH)/z88dk_sprites_definitions.h
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_ROM_OPTS) \
	$(INCLUDE_OPTS) \
	-D__PX8__ \
	-DFULL_GAME \
	-subtype=px8 \
	-create-app -o px8 \
	-vn -lndos \
	-DALT_PRINT \
	-DZ88DK_SPRITES -DNO_INIT_GRAPHICS \
	-DANIMATE_PLAYER \
	-DLESS_TEXT \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES)
	rm px8
	mv PX8.ROM $(BUILD_PATH)/FULL_px8.ROM


