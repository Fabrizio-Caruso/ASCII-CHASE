SYMBOLS {
    __LOADADDR__:  type = import;
	__STACKSIZE__:   type = weak, value = $0000;
}
MEMORY {
    ZP: start =  $0002, size = $001A, type = rw, define = yes;
    SCREEN: start =  $1000, size = $0200;
    STARTRAM: start = $11FF, size = $0201, define = yes, file = %O, fill = yes;
    RAM: start = $1200, size = $0A00, define = yes, file = %O, fill = yes;
    CHAR: start = $1C00, size = $0800, type = rw,  define = yes, fill = yes;
    MAIN: start = $2000, size = $6000 - __STACKSIZE__, type = rw, define = yes, file = %O;
}
SEGMENTS {
    STARTUP:  load = STARTRAM, type = ro;
    LOWCODE:  load = STARTRAM, type = ro,               optional = yes;
    LOADADDR: load = STARTRAM, type = ro;	
    UDCCHAR:  load = CHAR, type = rw, define = yes, optional = no;
    INIT:     load = RAM, type = ro, define = yes, optional = yes;
    CODE:     load = MAIN, type = ro, define = yes;
    ONCE:     load = MAIN,     type = ro,  define   = yes;	
    RODATA:   load = RAM, type = ro;
    DATA:     load = RAM, type = rw;
    BSS:      load = RAM, type = bss, define = yes;
    HEAP:     load = RAM, type = bss, optional = yes; # must sit just below stack
    ZEROPAGE: load = ZP,  type = zp;
}
FEATURES {
    CONDES: segment = INIT,
       type = constructor,
       label = __CONSTRUCTOR_TABLE__,
       count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
       type = destructor,
       label = __DESTRUCTOR_TABLE__,
       count = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
       type = interruptor,
       label = __INTERRUPTOR_TABLE__,
       count = __INTERRUPTOR_COUNT__;
}
